# Set the build version.
version: "{build}"

# Set the clone folder so that Mutagen ends up in the GOPATH.
clone_folder: C:\gopath\src\github.com\havoc-io\mutagen

# Set Go versions.
environment:
  GOPATH: C:\gopath
  GOROOT: C:\go19
init:
  - set PATH=%GOROOT%\bin;%GOPATH%\bin;%PATH%

# Disable AppVeyor's default Visual Studio build system.
build: off

# Fetch vendored third-party dependencies, install a tool for merging coverage
# profiles, and install the codecov.io Python-based upload tool.
before_test:
  - git submodule init
  - git submodule update
  - go get -u -v github.com/wadey/gocovmerge
  - pip install codecov

# Run tests, upload the coverage report, and build bundles. We fold coverage
# report uploading into test_script because after_test doesn't seem to fail the
# build if an upload fails (which we want to do).
# HACK: We have to use a custom script to invoke tests because we want a
# combined coverage report that includes all packages and go test currently
# doesn't support that (golang/go#6909).
# TODO: It looks like golang/go#6909 is going to be resolved in Go 1.10, so I
# think we'll be able to ditch our custom ci_testing.go script and just use the
# toolchain directly. We'll also be able to ditch gocovmerge and just get a
# unified coverage profile directly. Other relevant issues are golang/go#10271
# and golang/go#21126, which are slight variations on the main issue and will
# also seemingly be resolved in Go 1.10. We may still need to find a way to skip
# the directories we have that are not actually Go packages - it depends whether
# or not they cause problems.
test_script:
  - go version
  - go run scripts/ci_testing.go --race
  - go run scripts/ci_testing.go --goarch=386 --no-cover
  - codecov -X gcov -f coverage.txt
  - go run scripts/build.go --mode=testing

# Send notifications.
notifications:
  - provider: Email
    to:
      - jacob@havoc.io
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true
