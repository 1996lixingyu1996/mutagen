package filesystem

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"github.com/pkg/errors"

	"golang.org/x/sys/windows"

	"github.com/hectane/go-acl"
	aclapi "github.com/hectane/go-acl/api"
)

// pathSeparator is a byte representation of the OS path separator. We rely on
// this being a single byte for performance in ensureNoPathSeparator. For each
// platform where we make this assumption, we have a test to ensure that it's
// valid.
var pathSeparator = byte(os.PathSeparator)

// pathSeparatorAlternate is a byte representation of the alternate OS path
// separator. We rely on this being a single byte for performance in
// ensureNoPathSeparator. For each platform where we make this assumption, we
// have a test to ensure that it's valid.
var pathSeparatorAlternate = byte('/')

// ensureValidName verifies that the provided name does not reference the
// current directory, the parent directory, or contain a path separator
// character.
func ensureValidName(name string) error {
	// Verify that the name does not reference the directory itself or the
	// parent directory.
	if name == "." {
		return errors.New("name is directory reference")
	} else if name == ".." {
		return errors.New("name is parent directory reference")
	}

	// Verify that neither of the path separator characters appears in the name.
	if strings.IndexByte(name, pathSeparator) != -1 {
		return errors.New("path separator appears in name")
	} else if strings.IndexByte(name, pathSeparatorAlternate) != -1 {
		return errors.New("alternate path separator appears in name")
	}

	// Success.
	return nil
}

// Directory represents a directory on disk and provides race-free operations on
// the directory's contents. All of its operations avoid the traversal of
// symbolic links.
type Directory struct {
	// handle is the underlying Windows HANDLE object that has been opened
	// without the FILE_SHARE_DELETE to ensure that the directory is immovable.
	handle windows.Handle
	// file is the underlying os.File object corresponding to the directory. On
	// Windows systems, it is not actually a wrapper around the handle object,
	// but rather around a search handle generated by the FindFirstFileExW
	// function, hence the reason we need to hold open a separate HANDLE. It is
	// guaranteed that the value returned from the file's Name function will be
	// an absolute path.
	file *os.File
}

// Close closes the directory.
func (d *Directory) Close() error {
	// Close the file object.
	if err := d.file.Close(); err != nil {
		windows.CloseHandle(d.handle)
		return errors.Wrap(err, "unable to close file object")
	}

	// Close the handle.
	if err := windows.CloseHandle(d.handle); err != nil {
		return errors.Wrap(err, "unable to close file handle")
	}

	// Success.
	return nil
}

// CreateDirectory creates a new directory with the specified name inside the
// directory. The directory will be created with user-only read/write/execute
// permissions.
func (d *Directory) CreateDirectory(name string) error {
	// Verify that the name is valid.
	if err := ensureValidName(name); err != nil {
		return err
	}

	// Create the directory.
	return os.Mkdir(filepath.Join(d.file.Name(), name), 0700)
}

// CreateTemporaryFile creates a new temporary file using the specified name
// pattern inside the directory. Pattern behavior follows that of
// io/ioutil.TempFile. The file will be created with user-only read/write
// permissions.
func (d *Directory) CreateTemporaryFile(pattern string) (string, WritableFile, error) {
	// Verify that the name is valid. This should still be a sensible operation
	// for pattern specifications.
	if err := ensureValidName(pattern); err != nil {
		return "", nil, err
	}

	// Create the temporary file using the standard io/ioutil implementation.
	file, err := ioutil.TempFile(d.file.Name(), pattern)
	if err != nil {
		return "", nil, err
	}

	// Extract the base name of the file.
	name := filepath.Base(file.Name())

	// Success.
	return name, file, nil
}

// CreateSymbolicLink creates a new symbolic link with the specified name and
// target inside the directory. The symbolic link is created with the default
// system permissions (which, generally speaking, don't apply to the symbolic
// link itself).
func (d *Directory) CreateSymbolicLink(name, target string) error {
	// Verify that the name is valid.
	if err := ensureValidName(name); err != nil {
		return err
	}

	// Create the symbolic link.
	return os.Symlink(target, filepath.Join(d.file.Name(), name))
}

// SetPermissions sets the permissions on the content within the directory
// specified by name. Ownership information is set first, followed by
// permissions extracted from the mode using ModePermissionsMask. Ownership
// setting can be skipped by providing a nil OwnershipSpecification. Setting
// only individual components of ownership can be accomplished by providing an
// OwnershipSpecification with only the relevant components set. Permission
// setting can be skipped by providing a mode value that yields 0 after
// permission bit masking.
func (d *Directory) SetPermissions(name string, ownership *OwnershipSpecification, mode Mode) error {
	// Verify that the name is valid.
	if err := ensureValidName(name); err != nil {
		return err
	}

	// Compute the target path.
	path := filepath.Join(d.file.Name(), name)

	// Set ownership information, if specified.
	if ownership != nil && (ownership.userSID != nil || ownership.groupSID != nil) {
		// Compute the information that we're going to set.
		var information uint32
		if ownership.userSID != nil {
			information |= aclapi.OWNER_SECURITY_INFORMATION
		}
		if ownership.groupSID != nil {
			information |= aclapi.GROUP_SECURITY_INFORMATION
		}

		// Set the information.
		if err := aclapi.SetNamedSecurityInfo(
			path,
			aclapi.SE_FILE_OBJECT,
			information,
			ownership.userSID,
			ownership.groupSID,
			0,
			0,
		); err != nil {
			return errors.Wrap(err, "unable to set ownership information")
		}
	}

	// Set permissions, if specified.
	mode = mode & ModePermissionsMask
	if mode != 0 {
		if err := acl.Chmod(path, os.FileMode(mode)); err != nil {
			return errors.Wrap(err, "unable to set permission bits")
		}
	}

	// Success.
	return nil
}

// openHandle is the underlying open implementation shared by OpenDirectory and
// OpenFile.
func (d *Directory) openHandle(name string, wantDirectory bool) (string, windows.Handle, error) {
	// Verify that the name is valid.
	if err := ensureValidName(name); err != nil {
		return "", 0, err
	}

	// Compute the full path.
	path := filepath.Join(d.file.Name(), name)

	// Convert the path to UTF-16.
	path16, err := windows.UTF16PtrFromString(path)
	if err != nil {
		return "", 0, errors.Wrap(err, "unable to convert path to UTF-16")
	}

	// Open the path in a manner that is suitable for reading, doesn't allow for
	// other threads or processes to delete or rename the file while open,
	// avoids symbolic link traversal (at the path leaf), and has suitable
	// semantics for both files and directories.
	handle, err := windows.CreateFile(
		path16,
		windows.GENERIC_READ,
		windows.FILE_SHARE_READ|windows.FILE_SHARE_WRITE,
		nil,
		windows.OPEN_EXISTING,
		windows.FILE_ATTRIBUTE_NORMAL|windows.FILE_FLAG_BACKUP_SEMANTICS|windows.FILE_FLAG_OPEN_REPARSE_POINT,
		0,
	)
	if err != nil {
		return "", 0, errors.Wrap(err, "unable to open path")
	}

	// Query file metadata.
	var metadata windows.ByHandleFileInformation
	if err := windows.GetFileInformationByHandle(handle, &metadata); err != nil {
		windows.CloseHandle(handle)
		return "", 0, errors.Wrap(err, "unable to query file metadata")
	}

	// Verify that the handle does not represent a symbolic link and that the
	// type coincides with what we want. Note that FILE_ATTRIBUTE_REPARSE_POINT
	// can be or'd with FILE_ATTRIBUTE_DIRECTORY (since symbolic links are
	// "typed" on Windows), so we have to explicitly exclude reparse points
	// before checking types.
	//
	// TODO: Are there additional attributes upon which we should reject here?
	// The Go os.File implementation doesn't seem to for normal os.Open
	// operations, so I guess we don't need to either, but we should keep the
	// option in mind.
	if metadata.FileAttributes&windows.FILE_ATTRIBUTE_REPARSE_POINT != 0 {
		windows.CloseHandle(handle)
		return "", 0, errors.New("path pointed to symbolic link")
	} else if wantDirectory && metadata.FileAttributes&windows.FILE_ATTRIBUTE_DIRECTORY == 0 {
		windows.CloseHandle(handle)
		return "", 0, errors.New("path pointed to non-directory location")
	}

	// Success.
	return path, handle, nil
}

// OpenDirectory opens the directory within the directory specified by name.
func (d *Directory) OpenDirectory(name string) (*Directory, error) {
	// Open the directory handle.
	path, handle, err := d.openHandle(name, true)
	if err != nil {
		return nil, errors.Wrap(err, "unable to open directory handle")
	}

	// Open the corresponding file object.
	file, err := os.Open(path)
	if err != nil {
		windows.CloseHandle(handle)
		return nil, errors.Wrap(err, "unable to open file object for directory")
	}

	// Success.
	return &Directory{
		handle: handle,
		file:   file,
	}, nil
}

// ReadContents queries the directory contents and their associated metadata.
func (d *Directory) ReadContents() ([]*Metadata, error) {
	// Read directory content.
	contents, err := d.file.Readdir(0)
	if err != nil {
		return nil, err
	}

	// Allocate the result slice with enough capacity to accommodate all
	// entries.
	results := make([]*Metadata, 0, len(contents))

	// Loop over contents.
	for _, content := range contents {
		// Watch for names that reference the directory itself or the parent
		// directory. The implementation underlying os.File.Readdir does seem to
		// filter these out, but that's not guaranteed by its documentation, so
		// it's better to do this explicitly.
		name := content.Name()
		if name == "." || name == ".." {
			continue
		}

		// Convert and append the metadata. Unfortunately we can't populate
		// FileID and DeviceID because the FindFirstFile/FindNextFile
		// infrastructure used by the os package doesn't provide access to this
		// information. We'd have to open each file and use
		// GetFileInformationByHandle, which is just way too expensive.
		results = append(results, &Metadata{
			Name:             name,
			Mode:             Mode(content.Mode()),
			Size:             uint64(content.Size()),
			ModificationTime: content.ModTime(),
		})
	}

	// Success.
	return results, nil
}

// OpenFile opens the file within the directory specified by name.
func (d *Directory) OpenFile(name string) (ReadableFile, error) {
	// Open the file handle.
	_, handle, err := d.openHandle(name, false)
	if err != nil {
		return nil, errors.Wrap(err, "unable to open file handle")
	}

	// Wrap the file handle in an os.File object. Even though we have full path
	// information available, we use the provided name as the file name because
	// it's technically the "name" that was used to open the file.
	file := os.NewFile(uintptr(handle), name)

	// Success.
	return file, nil
}

// ReadSymbolicLink reads the target of the symbolic link within the directory
// specified by name.
func (d *Directory) ReadSymbolicLink(name string) (string, error) {
	// Verify that the name is valid.
	if err := ensureValidName(name); err != nil {
		return "", err
	}

	// Read the symbolic link.
	return os.Readlink(filepath.Join(d.file.Name(), name))
}

// RemoveDirectory deletes a directory with the specified name inside the
// directory. The removal target must be empty.
func (d *Directory) RemoveDirectory(name string) error {
	// Verify that the name is valid.
	if err := ensureValidName(name); err != nil {
		return err
	}

	// Compute the full path.
	path := filepath.Join(d.file.Name(), name)

	// Convert the path to UTF-16.
	path16, err := windows.UTF16PtrFromString(path)
	if err != nil {
		return errors.Wrap(err, "unable to convert path to UTF-16")
	}

	// Remove the directory.
	return windows.RemoveDirectory(path16)
}

// RemoveFile deletes a file with the specified name inside the directory.
func (d *Directory) RemoveFile(name string) error {
	// Verify that the name is valid.
	if err := ensureValidName(name); err != nil {
		return err
	}

	// Compute the full path.
	path := filepath.Join(d.file.Name(), name)

	// Convert the path to UTF-16.
	path16, err := windows.UTF16PtrFromString(path)
	if err != nil {
		return errors.Wrap(err, "unable to convert path to UTF-16")
	}

	// Remove the directory.
	return windows.DeleteFile(path16)
}

// RemoveSymbolicLink deletes a symbolic link with the specified name inside the
// directory.
func (d *Directory) RemoveSymbolicLink(name string) error {
	return d.RemoveFile(name)
}

// atomicRename performs an atomic rename operation, relocating the file
// specified by sourceName within sourceDirectory to the location specified by
// targetName within targetDirectory. It does not support cross-device copies,
// which can be performed in an approximately atomic fashion by AtomicRename.
func atomicRename(
	sourceDirectory *Directory, sourceName string,
	targetDirectory *Directory, targetName string,
) error {
	// Verify that both names are valid.
	if err := ensureValidName(sourceName); err != nil {
		return errors.Wrap(err, "source name invalid")
	} else if err = ensureValidName(targetName); err != nil {
		return errors.Wrap(err, "target name invalid")
	}

	// Perform an atomic rename.
	return os.Rename(
		filepath.Join(sourceDirectory.file.Name(), sourceName),
		filepath.Join(targetDirectory.file.Name(), targetName),
	)
}
