// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/havoc-io/mutagen/pkg/sync/cache.proto

package sync

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CacheEntry represents cache data for a file on disk.
type CacheEntry struct {
	// Mode stores the value of the Go os package's FileMode type. The meaning
	// of this value is defined to be stable (even if we'd have to implement its
	// computation ourselves when porting to another language), so it's safe to
	// use, and it's a relatively sane implementation based on POSIX mode bits.
	// This information is currently used in scans and transitions, but only the
	// type and executability bits are really used (or at least necessary) at
	// the moment. It's not clear whether or not we'll eventually need the other
	// permission bits, and it might be possible to get away with a type
	// enumeration instead. This might be easier than trying to replicate
	// FileMode values if moving to another language, though I'm not sure that
	// would be too difficult. But I suppose it's better to just have this
	// additional mode information available for the sake of generality and
	// extensibility. We can always drop it later, but we can't add it back. It
	// may (I'm not exactly sure how) come in useful if we want to implement
	// permission propagation or need a better change detection heuristic. At
	// the moment though, it's highly unlikely that we'll switch away from Go,
	// and I'm willing to live with this slightly "unclean" design, especially
	// given its potential and the relative ease of deprecating it if necessary.
	Mode uint32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// ModificationTime is the cached modification time.
	ModificationTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=modificationTime,proto3" json:"modificationTime,omitempty"`
	// Size is the cached size.
	Size uint64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// Digest is the cached digest for file entries.
	Digest               []byte   `protobuf:"bytes,9,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CacheEntry) Reset()         { *m = CacheEntry{} }
func (m *CacheEntry) String() string { return proto.CompactTextString(m) }
func (*CacheEntry) ProtoMessage()    {}
func (*CacheEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_cache_e307454150aa15f8, []int{0}
}
func (m *CacheEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CacheEntry.Unmarshal(m, b)
}
func (m *CacheEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CacheEntry.Marshal(b, m, deterministic)
}
func (dst *CacheEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheEntry.Merge(dst, src)
}
func (m *CacheEntry) XXX_Size() int {
	return xxx_messageInfo_CacheEntry.Size(m)
}
func (m *CacheEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CacheEntry proto.InternalMessageInfo

func (m *CacheEntry) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *CacheEntry) GetModificationTime() *timestamp.Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return nil
}

func (m *CacheEntry) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CacheEntry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

// Cache provides a store for file metadata and digets to allow for efficient
// rescans.
type Cache struct {
	// Entries is a map from scan path to cache entry.
	Entries              map[string]*CacheEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Cache) Reset()         { *m = Cache{} }
func (m *Cache) String() string { return proto.CompactTextString(m) }
func (*Cache) ProtoMessage()    {}
func (*Cache) Descriptor() ([]byte, []int) {
	return fileDescriptor_cache_e307454150aa15f8, []int{1}
}
func (m *Cache) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cache.Unmarshal(m, b)
}
func (m *Cache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cache.Marshal(b, m, deterministic)
}
func (dst *Cache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cache.Merge(dst, src)
}
func (m *Cache) XXX_Size() int {
	return xxx_messageInfo_Cache.Size(m)
}
func (m *Cache) XXX_DiscardUnknown() {
	xxx_messageInfo_Cache.DiscardUnknown(m)
}

var xxx_messageInfo_Cache proto.InternalMessageInfo

func (m *Cache) GetEntries() map[string]*CacheEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*CacheEntry)(nil), "sync.CacheEntry")
	proto.RegisterType((*Cache)(nil), "sync.Cache")
	proto.RegisterMapType((map[string]*CacheEntry)(nil), "sync.Cache.EntriesEntry")
}

func init() {
	proto.RegisterFile("github.com/havoc-io/mutagen/pkg/sync/cache.proto", fileDescriptor_cache_e307454150aa15f8)
}

var fileDescriptor_cache_e307454150aa15f8 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xb1, 0x6a, 0xf3, 0x30,
	0x14, 0x85, 0x51, 0xe2, 0xe4, 0x27, 0x4a, 0x7e, 0x30, 0x1a, 0x8a, 0xf0, 0x52, 0x93, 0xa1, 0x78,
	0xa9, 0x54, 0xdc, 0xa5, 0x74, 0x2d, 0xe9, 0xd4, 0x49, 0xe4, 0x05, 0x64, 0xf9, 0x46, 0x16, 0x89,
	0x2c, 0x63, 0xcb, 0x01, 0xf7, 0x0d, 0xba, 0xf7, 0x81, 0x8b, 0xe5, 0x1a, 0x02, 0xdd, 0xce, 0xbd,
	0xe7, 0xde, 0x8f, 0x73, 0xf0, 0x93, 0x36, 0xbe, 0xea, 0x0b, 0xa6, 0x9c, 0xe5, 0x95, 0xbc, 0x3a,
	0xf5, 0x68, 0x1c, 0xb7, 0xbd, 0x97, 0x1a, 0x6a, 0xde, 0x9c, 0x35, 0xef, 0x86, 0x5a, 0x71, 0x25,
	0x55, 0x05, 0xac, 0x69, 0x9d, 0x77, 0x24, 0x1a, 0x37, 0xc9, 0xbd, 0x76, 0x4e, 0x5f, 0x80, 0x87,
	0x5d, 0xd1, 0x9f, 0xb8, 0x37, 0x16, 0x3a, 0x2f, 0x6d, 0x33, 0x9d, 0xed, 0xbf, 0x11, 0xc6, 0x6f,
	0xe3, 0xdb, 0xa1, 0xf6, 0xed, 0x40, 0x08, 0x8e, 0xac, 0x2b, 0x81, 0xa2, 0x14, 0x65, 0xff, 0x45,
	0xd0, 0xe4, 0x1d, 0xc7, 0xd6, 0x95, 0xe6, 0x64, 0x94, 0xf4, 0xc6, 0xd5, 0x47, 0x63, 0x81, 0x2e,
	0x52, 0x94, 0x6d, 0xf3, 0x84, 0x4d, 0x78, 0x36, 0xe3, 0xd9, 0x71, 0xc6, 0x8b, 0x3f, 0x3f, 0x23,
	0xbb, 0x33, 0x9f, 0x40, 0x97, 0x29, 0xca, 0x22, 0x11, 0x34, 0xb9, 0xc3, 0xeb, 0xd2, 0x68, 0xe8,
	0x3c, 0xdd, 0xa4, 0x28, 0xdb, 0x89, 0xdf, 0x69, 0xff, 0x85, 0xf0, 0x2a, 0xc4, 0x22, 0x39, 0xfe,
	0x07, 0xb5, 0x6f, 0x0d, 0x74, 0x14, 0xa5, 0xcb, 0x6c, 0x9b, 0x53, 0x36, 0x36, 0x63, 0xc1, 0x65,
	0x87, 0xc9, 0x0a, 0xe1, 0xc5, 0x7c, 0x98, 0x7c, 0xe0, 0xdd, 0xad, 0x41, 0x62, 0xbc, 0x3c, 0xc3,
	0x10, 0x4a, 0x6d, 0xc4, 0x28, 0xc9, 0x03, 0x5e, 0x5d, 0xe5, 0xa5, 0x9f, 0x8b, 0xc4, 0x37, 0xcc,
	0x89, 0x35, 0xd9, 0xaf, 0x8b, 0x17, 0x54, 0xac, 0x43, 0xbb, 0xe7, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe3, 0x0c, 0xbc, 0x7c, 0x84, 0x01, 0x00, 0x00,
}
