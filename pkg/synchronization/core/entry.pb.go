// Code generated by protoc-gen-go. DO NOT EDIT.
// source: synchronization/core/entry.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// EntryKind encodes the type of entry represented by an Entry object.
type EntryKind int32

const (
	// EntryKind_Directory represents a directory entry.
	EntryKind_Directory EntryKind = 0
	// EntryKind_File represents a file entry.
	EntryKind_File EntryKind = 1
	// EntryKind_Symlink represents a symlink entry.
	EntryKind_Symlink EntryKind = 2
)

var EntryKind_name = map[int32]string{
	0: "Directory",
	1: "File",
	2: "Symlink",
}

var EntryKind_value = map[string]int32{
	"Directory": 0,
	"File":      1,
	"Symlink":   2,
}

func (x EntryKind) String() string {
	return proto.EnumName(EntryKind_name, int32(x))
}

func (EntryKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a8e7ed6fd966226, []int{0}
}

// Entry represents a filesystem node (e.g. a directory, a file, or a symlink).
type Entry struct {
	// Kind encodes the type of filesystem entry being represented.
	Kind EntryKind `protobuf:"varint,1,opt,name=kind,proto3,enum=core.EntryKind" json:"kind,omitempty"`
	// Contents represents a directory entry's contents.
	Contents map[string]*Entry `protobuf:"bytes,5,rep,name=contents,proto3" json:"contents,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Digest represents the hash of a file entry's contents.
	Digest []byte `protobuf:"bytes,8,opt,name=digest,proto3" json:"digest,omitempty"`
	// Executable indicates whether or not a file entry is marked as executable.
	Executable bool `protobuf:"varint,9,opt,name=executable,proto3" json:"executable,omitempty"`
	// Target is the symlink target for symlink entries.
	Target               string   `protobuf:"bytes,12,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a8e7ed6fd966226, []int{0}
}

func (m *Entry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Entry.Unmarshal(m, b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return xxx_messageInfo_Entry.Size(m)
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetKind() EntryKind {
	if m != nil {
		return m.Kind
	}
	return EntryKind_Directory
}

func (m *Entry) GetContents() map[string]*Entry {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *Entry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *Entry) GetExecutable() bool {
	if m != nil {
		return m.Executable
	}
	return false
}

func (m *Entry) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func init() {
	proto.RegisterEnum("core.EntryKind", EntryKind_name, EntryKind_value)
	proto.RegisterType((*Entry)(nil), "core.Entry")
	proto.RegisterMapType((map[string]*Entry)(nil), "core.Entry.ContentsEntry")
}

func init() { proto.RegisterFile("synchronization/core/entry.proto", fileDescriptor_4a8e7ed6fd966226) }

var fileDescriptor_4a8e7ed6fd966226 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xcd, 0xbe, 0x6c, 0xdf, 0x6e, 0x5a, 0x72, 0x90, 0xea, 0x41, 0xa2, 0x5e, 0x8a, 0x60,
	0x8b, 0xf3, 0x03, 0xf1, 0xe8, 0x17, 0x82, 0xb7, 0x78, 0xf3, 0xd6, 0x65, 0x2f, 0x5d, 0x68, 0x97,
	0x8c, 0xec, 0xed, 0xb0, 0xfe, 0xef, 0x82, 0xb4, 0x8e, 0x31, 0xc1, 0x5b, 0x9e, 0xe7, 0xf7, 0x84,
	0x3c, 0x79, 0x40, 0x2c, 0x6b, 0xa3, 0x66, 0xce, 0x1a, 0xfd, 0x95, 0x91, 0xb6, 0x26, 0x55, 0xd6,
	0x61, 0x8a, 0x86, 0x5c, 0x9d, 0x2c, 0x9c, 0x25, 0xcb, 0x7b, 0x8d, 0x73, 0xfa, 0xcd, 0xa0, 0xff,
	0xdc, 0xb8, 0xfc, 0x0c, 0x7a, 0x85, 0x36, 0xd3, 0x88, 0x09, 0x16, 0xef, 0x8d, 0xf7, 0x93, 0x06,
	0x27, 0x2d, 0x7a, 0xd3, 0x66, 0x2a, 0x5b, 0xc8, 0x6f, 0xc0, 0x53, 0xd6, 0x10, 0x1a, 0x5a, 0x46,
	0x7d, 0xd1, 0x8d, 0x83, 0xf1, 0xe1, 0x56, 0x30, 0x79, 0x5c, 0xb3, 0x56, 0xc9, 0x4d, 0x94, 0x1f,
	0xc0, 0x60, 0xaa, 0x73, 0x5c, 0x52, 0xe4, 0x09, 0x16, 0x0f, 0xe5, 0x5a, 0xf1, 0x63, 0x00, 0xfc,
	0x44, 0x55, 0x51, 0x36, 0x29, 0x31, 0xf2, 0x05, 0x8b, 0x3d, 0xb9, 0xe5, 0x34, 0xf7, 0x28, 0x73,
	0x39, 0x52, 0x34, 0x14, 0x2c, 0xf6, 0xe5, 0x5a, 0x1d, 0xbd, 0xc2, 0xe8, 0xcf, 0x53, 0x3c, 0x84,
	0x6e, 0x81, 0x75, 0xdb, 0xdd, 0x97, 0xcd, 0x91, 0x9f, 0x40, 0x7f, 0x95, 0x95, 0x15, 0x46, 0x1d,
	0xc1, 0xe2, 0x60, 0x1c, 0x6c, 0xd5, 0x94, 0xbf, 0xe4, 0xbe, 0x73, 0xc7, 0xce, 0x2f, 0xc1, 0xdf,
	0xfc, 0x91, 0x8f, 0xc0, 0x7f, 0xd2, 0x0e, 0x15, 0x59, 0x57, 0x87, 0x3b, 0xdc, 0x83, 0xde, 0x8b,
	0x2e, 0x31, 0x64, 0x3c, 0x80, 0xdd, 0xf7, 0x7a, 0x5e, 0x6a, 0x53, 0x84, 0x9d, 0x87, 0xdb, 0x8f,
	0xeb, 0x5c, 0xd3, 0xac, 0x9a, 0x24, 0xca, 0xce, 0xd3, 0x59, 0xb6, 0xb2, 0xea, 0x42, 0xdb, 0x74,
	0x5e, 0x51, 0x96, 0xa3, 0x49, 0x17, 0x45, 0x9e, 0xfe, 0x37, 0xfe, 0x64, 0xd0, 0xee, 0x7e, 0xf5,
	0x13, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x42, 0x73, 0xdb, 0x9b, 0x01, 0x00, 0x00,
}
