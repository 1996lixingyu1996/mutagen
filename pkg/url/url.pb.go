// Code generated by protoc-gen-go. DO NOT EDIT.
// source: url/url.proto

package url

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Kind indicates the kind of a URL.
type Kind int32

const (
	// Synchronization indicates a synchronization URL.
	Kind_Synchronization Kind = 0
	// Forwarding indicates a forwarding URL.
	Kind_Forwarding Kind = 1
)

var Kind_name = map[int32]string{
	0: "Synchronization",
	1: "Forwarding",
}

var Kind_value = map[string]int32{
	"Synchronization": 0,
	"Forwarding":      1,
}

func (x Kind) String() string {
	return proto.EnumName(Kind_name, int32(x))
}

func (Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce31eacd751d7393, []int{0}
}

// Protocol indicates a location type.
type Protocol int32

const (
	// Local indicates that the resource is on the local system.
	Protocol_Local Protocol = 0
	// SSH indicates that the resource is accessible via SSH.
	Protocol_SSH Protocol = 1
	// Tunnel indicates that the resource is available via a mutagen.io tunnel.
	Protocol_Tunnel Protocol = 3
	// Docker indicates that the resource is inside a Docker container.
	Protocol_Docker Protocol = 11
)

var Protocol_name = map[int32]string{
	0:  "Local",
	1:  "SSH",
	3:  "Tunnel",
	11: "Docker",
}

var Protocol_value = map[string]int32{
	"Local":  0,
	"SSH":    1,
	"Tunnel": 3,
	"Docker": 11,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}

func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce31eacd751d7393, []int{1}
}

// URL represents a pointer to a resource.
type URL struct {
	// Kind indicates the URL kind.
	// NOTE: This field number is out of order for historical reasons.
	Kind Kind `protobuf:"varint,7,opt,name=kind,proto3,enum=url.Kind" json:"kind,omitempty"`
	// Protocol indicates a location type.
	Protocol Protocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=url.Protocol" json:"protocol,omitempty"`
	// User is the user under which a resource should be accessed.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Host is protocol-specific, but generally indicates the location of the
	// remote.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Port indicates a TCP port via which to access the remote location, if
	// applicable.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Path indicates the path of a resource.
	Path string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	// Environment contains captured environment variable information. It is not
	// a required component and its contents and their behavior depend on the
	// transport implementation.
	Environment map[string]string `protobuf:"bytes,6,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Field 7 is already used above for the kind field. It is out of order for
	// historical reasons.
	// Parameters are internal transport parameters. These are set for URLs
	// generated internally that require additional metadata. Parameters are not
	// requires and their behavior is dependent on the transport implementation.
	Parameters           map[string]string `protobuf:"bytes,8,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *URL) Reset()         { *m = URL{} }
func (m *URL) String() string { return proto.CompactTextString(m) }
func (*URL) ProtoMessage()    {}
func (*URL) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce31eacd751d7393, []int{0}
}

func (m *URL) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_URL.Unmarshal(m, b)
}
func (m *URL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_URL.Marshal(b, m, deterministic)
}
func (m *URL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URL.Merge(m, src)
}
func (m *URL) XXX_Size() int {
	return xxx_messageInfo_URL.Size(m)
}
func (m *URL) XXX_DiscardUnknown() {
	xxx_messageInfo_URL.DiscardUnknown(m)
}

var xxx_messageInfo_URL proto.InternalMessageInfo

func (m *URL) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_Synchronization
}

func (m *URL) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_Local
}

func (m *URL) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *URL) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *URL) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *URL) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *URL) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *URL) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func init() {
	proto.RegisterEnum("url.Kind", Kind_name, Kind_value)
	proto.RegisterEnum("url.Protocol", Protocol_name, Protocol_value)
	proto.RegisterType((*URL)(nil), "url.URL")
	proto.RegisterMapType((map[string]string)(nil), "url.URL.EnvironmentEntry")
	proto.RegisterMapType((map[string]string)(nil), "url.URL.ParametersEntry")
}

func init() { proto.RegisterFile("url/url.proto", fileDescriptor_ce31eacd751d7393) }

var fileDescriptor_ce31eacd751d7393 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x8b, 0x13, 0x31,
	0x14, 0xc6, 0x77, 0x36, 0xd3, 0x6e, 0xe7, 0x95, 0xee, 0x86, 0xe8, 0x21, 0x2e, 0x08, 0x83, 0x20,
	0x8e, 0x2b, 0x4e, 0x61, 0x05, 0x59, 0x14, 0x3d, 0x88, 0x2b, 0x82, 0x3d, 0x2c, 0xa9, 0xbd, 0x78,
	0x4b, 0xa7, 0x61, 0x26, 0xcc, 0x4c, 0x32, 0xa4, 0x49, 0xa5, 0xfe, 0x1f, 0xfe, 0xbf, 0x92, 0x4c,
	0x5b, 0x4b, 0x6f, 0x7b, 0xfb, 0xe5, 0x7b, 0xdf, 0xf7, 0x42, 0xde, 0x0b, 0x4c, 0x9c, 0x69, 0xa6,
	0xce, 0x34, 0x79, 0x67, 0xb4, 0xd5, 0x04, 0x39, 0xd3, 0xbc, 0xf8, 0x8b, 0x00, 0x2d, 0xd8, 0x8c,
	0x3c, 0x87, 0xb8, 0x96, 0x6a, 0x45, 0x2f, 0xd2, 0x28, 0xbb, 0xbc, 0x4d, 0x72, 0x6f, 0xfb, 0x21,
	0xd5, 0x8a, 0x05, 0x99, 0xbc, 0x86, 0x51, 0x08, 0x15, 0xba, 0xa1, 0x51, 0xb0, 0x4c, 0x82, 0xe5,
	0x61, 0x27, 0xb2, 0x43, 0x99, 0x10, 0x88, 0xdd, 0x5a, 0x18, 0x7a, 0x9e, 0x46, 0x59, 0xc2, 0x02,
	0x7b, 0xad, 0xd2, 0x6b, 0x4b, 0x51, 0xaf, 0x79, 0xf6, 0x5a, 0xa7, 0x8d, 0xa5, 0x71, 0x1a, 0x65,
	0x13, 0x16, 0x38, 0x68, 0xdc, 0x56, 0x74, 0xd0, 0xfb, 0x3c, 0x93, 0x8f, 0x30, 0x16, 0x6a, 0x23,
	0x8d, 0x56, 0xad, 0x50, 0x96, 0x0e, 0x53, 0x94, 0x8d, 0x6f, 0x9f, 0x85, 0xdb, 0x17, 0x6c, 0x96,
	0xdf, 0xff, 0xaf, 0xdd, 0x2b, 0x6b, 0xb6, 0xec, 0xd8, 0x4d, 0xee, 0x00, 0x3a, 0x6e, 0x78, 0x2b,
	0xac, 0x30, 0x6b, 0x3a, 0x0a, 0x59, 0x7a, 0xc8, 0x3e, 0x1c, 0x4a, 0x7d, 0xf4, 0xc8, 0x7b, 0xfd,
	0x19, 0xf0, 0x69, 0x6b, 0x82, 0x01, 0xd5, 0x62, 0x1b, 0x06, 0x90, 0x30, 0x8f, 0xe4, 0x29, 0x0c,
	0x36, 0xbc, 0x71, 0x62, 0xf7, 0xda, 0xfe, 0xf0, 0xe1, 0xfc, 0x2e, 0xba, 0xfe, 0x04, 0x57, 0x27,
	0xed, 0x1f, 0x13, 0xbf, 0x79, 0x03, 0xb1, 0x1f, 0x3f, 0x79, 0x02, 0x57, 0xf3, 0xad, 0x2a, 0x2a,
	0xa3, 0x95, 0xfc, 0xc3, 0xad, 0xd4, 0x0a, 0x9f, 0x91, 0x4b, 0x80, 0x6f, 0xda, 0xfc, 0xe6, 0x66,
	0x25, 0x55, 0x89, 0xa3, 0x9b, 0xf7, 0x30, 0xda, 0x2f, 0x82, 0x24, 0x30, 0x98, 0xe9, 0x82, 0x37,
	0xf8, 0x8c, 0x5c, 0x00, 0x9a, 0xcf, 0xbf, 0xe3, 0x88, 0x00, 0x0c, 0x7f, 0x3a, 0xa5, 0x44, 0x83,
	0x91, 0xe7, 0xaf, 0xba, 0xa8, 0x85, 0xc1, 0xe3, 0x2f, 0xaf, 0x7e, 0xbd, 0x2c, 0xa5, 0xad, 0xdc,
	0x32, 0x2f, 0x74, 0x3b, 0x6d, 0x9d, 0xe5, 0xa5, 0x50, 0x6f, 0xa5, 0xde, 0xe3, 0xb4, 0xab, 0x4b,
	0xff, 0x61, 0x96, 0xc3, 0xb0, 0xdd, 0x77, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x87, 0xa1, 0x23,
	0x1a, 0x42, 0x02, 0x00, 0x00,
}
