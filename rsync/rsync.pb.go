// Code generated by protoc-gen-gogo.
// source: rsync.proto
// DO NOT EDIT!

/*
	Package rsync is a generated protocol buffer package.

	It is generated from these files:
		rsync.proto

	It has these top-level messages:
		Operation
		BlockHash
*/
package rsync

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OpType int32

const (
	OpType_OpBlock OpType = 0
	OpType_OpData  OpType = 1
	OpType_OpHash  OpType = 2
	// sproto subpackage, but having it makes conversion easier.
	OpType_OpBlockRange OpType = 3
)

var OpType_name = map[int32]string{
	0: "OpBlock",
	1: "OpData",
	2: "OpHash",
	3: "OpBlockRange",
}
var OpType_value = map[string]int32{
	"OpBlock":      0,
	"OpData":       1,
	"OpHash":       2,
	"OpBlockRange": 3,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}
func (OpType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRsync, []int{0} }

type Operation struct {
	Type          OpType `protobuf:"varint,1,opt,name=type,proto3,enum=rsync.OpType" json:"type,omitempty"`
	BlockIndex    uint64 `protobuf:"varint,2,opt,name=blockIndex,proto3" json:"blockIndex,omitempty"`
	BlockIndexEnd uint64 `protobuf:"varint,3,opt,name=blockIndexEnd,proto3" json:"blockIndexEnd,omitempty"`
	Data          []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptorRsync, []int{0} }

type BlockHash struct {
	Index      uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	StrongHash []byte `protobuf:"bytes,2,opt,name=strongHash,proto3" json:"strongHash,omitempty"`
	WeakHash   uint32 `protobuf:"varint,3,opt,name=weakHash,proto3" json:"weakHash,omitempty"`
}

func (m *BlockHash) Reset()                    { *m = BlockHash{} }
func (m *BlockHash) String() string            { return proto.CompactTextString(m) }
func (*BlockHash) ProtoMessage()               {}
func (*BlockHash) Descriptor() ([]byte, []int) { return fileDescriptorRsync, []int{1} }

func init() {
	proto.RegisterType((*Operation)(nil), "rsync.Operation")
	proto.RegisterType((*BlockHash)(nil), "rsync.BlockHash")
	proto.RegisterEnum("rsync.OpType", OpType_name, OpType_value)
}
func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRsync(dAtA, i, uint64(m.Type))
	}
	if m.BlockIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRsync(dAtA, i, uint64(m.BlockIndex))
	}
	if m.BlockIndexEnd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRsync(dAtA, i, uint64(m.BlockIndexEnd))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRsync(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *BlockHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRsync(dAtA, i, uint64(m.Index))
	}
	if len(m.StrongHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRsync(dAtA, i, uint64(len(m.StrongHash)))
		i += copy(dAtA[i:], m.StrongHash)
	}
	if m.WeakHash != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRsync(dAtA, i, uint64(m.WeakHash))
	}
	return i, nil
}

func encodeFixed64Rsync(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rsync(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRsync(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Operation) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRsync(uint64(m.Type))
	}
	if m.BlockIndex != 0 {
		n += 1 + sovRsync(uint64(m.BlockIndex))
	}
	if m.BlockIndexEnd != 0 {
		n += 1 + sovRsync(uint64(m.BlockIndexEnd))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRsync(uint64(l))
	}
	return n
}

func (m *BlockHash) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRsync(uint64(m.Index))
	}
	l = len(m.StrongHash)
	if l > 0 {
		n += 1 + l + sovRsync(uint64(l))
	}
	if m.WeakHash != 0 {
		n += 1 + sovRsync(uint64(m.WeakHash))
	}
	return n
}

func sovRsync(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRsync(x uint64) (n int) {
	return sovRsync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (OpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIndex", wireType)
			}
			m.BlockIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIndexEnd", wireType)
			}
			m.BlockIndexEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockIndexEnd |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRsync
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrongHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRsync
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrongHash = append(m.StrongHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StrongHash == nil {
				m.StrongHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeakHash", wireType)
			}
			m.WeakHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeakHash |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRsync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRsync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRsync
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRsync
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRsync(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRsync = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRsync   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rsync.proto", fileDescriptorRsync) }

var fileDescriptorRsync = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2a, 0xae, 0xcc,
	0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x3a, 0x18, 0xb9, 0x38,
	0xfd, 0x0b, 0x52, 0x8b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x84, 0x14, 0xb9, 0x58, 0x4a, 0x2a, 0x0b,
	0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x78, 0xf5, 0x20, 0x1a, 0xfc, 0x0b, 0x42, 0x2a,
	0x0b, 0x52, 0x83, 0xc0, 0x52, 0x42, 0x72, 0x5c, 0x5c, 0x49, 0x39, 0xf9, 0xc9, 0xd9, 0x9e, 0x79,
	0x29, 0xa9, 0x15, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x48, 0x22, 0x42, 0x2a, 0x5c, 0xbc,
	0x08, 0x9e, 0x6b, 0x5e, 0x8a, 0x04, 0x33, 0x58, 0x09, 0xaa, 0xa0, 0x90, 0x10, 0x17, 0x4b, 0x4a,
	0x62, 0x49, 0xa2, 0x04, 0x8b, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x98, 0xad, 0x14, 0xcb, 0xc5, 0xe9,
	0x04, 0x52, 0xe4, 0x91, 0x58, 0x9c, 0x21, 0x24, 0xc2, 0xc5, 0x9a, 0x09, 0xb6, 0x81, 0x11, 0xac,
	0x1d, 0xc2, 0x01, 0x59, 0x5e, 0x5c, 0x52, 0x94, 0x9f, 0x97, 0x0e, 0x52, 0x03, 0xb6, 0x9c, 0x27,
	0x08, 0x49, 0x44, 0x48, 0x8a, 0x8b, 0xa3, 0x3c, 0x35, 0x11, 0x6c, 0x02, 0xd8, 0x5e, 0xde, 0x20,
	0x38, 0x5f, 0xcb, 0x9e, 0x8b, 0x0d, 0xe2, 0x11, 0x21, 0x6e, 0x2e, 0x76, 0xff, 0x02, 0xb0, 0x55,
	0x02, 0x0c, 0x42, 0x5c, 0x20, 0x61, 0x97, 0xc4, 0x92, 0x44, 0x01, 0x46, 0x08, 0x1b, 0xa4, 0x58,
	0x80, 0x49, 0x48, 0x80, 0x8b, 0x07, 0xaa, 0x28, 0x28, 0x31, 0x2f, 0x3d, 0x55, 0x80, 0xd9, 0x49,
	0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58,
	0x8e, 0x21, 0x89, 0x0d, 0x1c, 0x94, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x8e, 0xe4,
	0xc3, 0x59, 0x01, 0x00, 0x00,
}
