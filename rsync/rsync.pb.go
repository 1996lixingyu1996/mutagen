// Code generated by protoc-gen-gogo.
// source: rsync.proto
// DO NOT EDIT!

/*
	Package rsync is a generated protocol buffer package.

	It is generated from these files:
		rsync.proto

	It has these top-level messages:
		BlockHash
		Operation
*/
package rsync

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BlockHash struct {
	// Index is the 0-based index of the block within the file. Indices
	// represent increments of block size.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Weak is the weak hash for the block.
	Weak uint32 `protobuf:"varint,2,opt,name=weak,proto3" json:"weak,omitempty"`
	// Strong is the strong hash for the block.
	// TODO: Unfortunately Protocol Buffers doesn't have a way to represent
	// fixed-size byte arrays, only slices. If we want to save allocations, we
	// could use a sequence of unsigned integers to represent the digest, though
	// that'll be tricky since we'll have to handle endianness.
	Strong []byte `protobuf:"bytes,3,opt,name=strong,proto3" json:"strong,omitempty"`
}

func (m *BlockHash) Reset()                    { *m = BlockHash{} }
func (m *BlockHash) String() string            { return proto.CompactTextString(m) }
func (*BlockHash) ProtoMessage()               {}
func (*BlockHash) Descriptor() ([]byte, []int) { return fileDescriptorRsync, []int{0} }

func (m *BlockHash) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BlockHash) GetWeak() uint32 {
	if m != nil {
		return m.Weak
	}
	return 0
}

func (m *BlockHash) GetStrong() []byte {
	if m != nil {
		return m.Strong
	}
	return nil
}

type Operation struct {
	// Data encodes raw data for data operations.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Start encodes the 0-indexed starting block for block operations.
	Start uint64 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// Count encodes the number of blocks to copy in block operations.
	Count uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptorRsync, []int{1} }

func (m *Operation) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Operation) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Operation) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*BlockHash)(nil), "rsync.BlockHash")
	proto.RegisterType((*Operation)(nil), "rsync.Operation")
}
func (m *BlockHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRsync(dAtA, i, uint64(m.Index))
	}
	if m.Weak != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRsync(dAtA, i, uint64(m.Weak))
	}
	if len(m.Strong) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRsync(dAtA, i, uint64(len(m.Strong)))
		i += copy(dAtA[i:], m.Strong)
	}
	return i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRsync(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Start != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRsync(dAtA, i, uint64(m.Start))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRsync(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func encodeFixed64Rsync(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rsync(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRsync(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BlockHash) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRsync(uint64(m.Index))
	}
	if m.Weak != 0 {
		n += 1 + sovRsync(uint64(m.Weak))
	}
	l = len(m.Strong)
	if l > 0 {
		n += 1 + l + sovRsync(uint64(l))
	}
	return n
}

func (m *Operation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRsync(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovRsync(uint64(m.Start))
	}
	if m.Count != 0 {
		n += 1 + sovRsync(uint64(m.Count))
	}
	return n
}

func sovRsync(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRsync(x uint64) (n int) {
	return sovRsync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weak", wireType)
			}
			m.Weak = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weak |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strong", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRsync
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strong = append(m.Strong[:0], dAtA[iNdEx:postIndex]...)
			if m.Strong == nil {
				m.Strong = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRsync
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRsync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRsync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRsync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRsync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRsync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRsync
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRsync
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRsync(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRsync = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRsync   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rsync.proto", fileDescriptorRsync) }

var fileDescriptorRsync = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x2c, 0xce, 0xc1, 0x4a, 0x80, 0x30,
	0x18, 0x07, 0x70, 0x56, 0x53, 0x70, 0xd9, 0x65, 0x44, 0x48, 0x07, 0x11, 0x4f, 0x5e, 0xd2, 0x43,
	0x6f, 0xe0, 0x29, 0x88, 0x08, 0xf6, 0x06, 0x73, 0xda, 0x14, 0x6b, 0x9f, 0x6c, 0x9f, 0x54, 0x6f,
	0xd8, 0xb1, 0x47, 0x08, 0x9f, 0x24, 0xfc, 0xd6, 0xed, 0xff, 0xdb, 0xf8, 0xff, 0x37, 0x71, 0xe5,
	0xc3, 0x97, 0x33, 0xed, 0xe6, 0x01, 0x41, 0x26, 0x84, 0xbb, 0x7b, 0xbb, 0xe0, 0xbc, 0x0f, 0xad,
	0x81, 0xf7, 0xce, 0x82, 0x85, 0x8e, 0x6e, 0x87, 0xfd, 0x95, 0x44, 0xa0, 0x14, 0x5b, 0xf5, 0xb3,
	0xc8, 0xfa, 0x37, 0x30, 0xeb, 0xa3, 0x0e, 0xb3, 0xbc, 0x11, 0xc9, 0xe2, 0xc6, 0xe9, 0xb3, 0x60,
	0x15, 0x6b, 0xb8, 0x8a, 0x90, 0x52, 0xf0, 0x8f, 0x49, 0xaf, 0xc5, 0x45, 0xc5, 0x9a, 0x6b, 0x45,
	0x59, 0xde, 0x8a, 0x34, 0xa0, 0x07, 0x67, 0x8b, 0xcb, 0x8a, 0x35, 0xb9, 0xfa, 0x57, 0xfd, 0x24,
	0xb2, 0x97, 0x6d, 0xf2, 0x1a, 0x17, 0x70, 0x67, 0x71, 0xd4, 0xa8, 0x69, 0x2d, 0x57, 0x94, 0xcf,
	0x27, 0x02, 0x6a, 0x8f, 0xb4, 0xc6, 0x55, 0xc4, 0x79, 0x6a, 0x60, 0x77, 0x48, 0x6b, 0x5c, 0x45,
	0xf4, 0xf9, 0xf7, 0x51, 0xb2, 0x9f, 0xa3, 0x64, 0xbf, 0x47, 0xc9, 0x86, 0x94, 0x3e, 0xfc, 0xf0,
	0x17, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x98, 0x46, 0x78, 0xf5, 0x00, 0x00, 0x00,
}
