// Code generated by protoc-gen-gogo.
// source: session.proto
// DO NOT EDIT!

/*
Package session is a generated protocol buffer package.

It is generated from these files:
	session.proto

It has these top-level messages:
	Session
	Archive
	StableEntry
	StableEntryContent
	StableArchive
*/
package session

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/gogo/protobuf/gogoproto"
import sync "github.com/havoc-io/mutagen/sync"
import url "github.com/havoc-io/mutagen/url"

import time "time"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Version int32

const (
	Version_Unknown  Version = 0
	Version_Version1 Version = 1
)

var Version_name = map[int32]string{
	0: "Unknown",
	1: "Version1",
}
var Version_value = map[string]int32{
	"Unknown":  0,
	"Version1": 1,
}

func (x Version) String() string {
	return proto.EnumName(Version_name, int32(x))
}
func (Version) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{0} }

type Session struct {
	Identifier           string     `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Version              Version    `protobuf:"varint,2,opt,name=version,proto3,enum=session.Version" json:"version,omitempty"`
	CreationTime         *time.Time `protobuf:"bytes,3,opt,name=creationTime,stdtime" json:"creationTime,omitempty"`
	CreatingVersionMajor uint32     `protobuf:"varint,4,opt,name=creatingVersionMajor,proto3" json:"creatingVersionMajor,omitempty"`
	CreatingVersionMinor uint32     `protobuf:"varint,5,opt,name=creatingVersionMinor,proto3" json:"creatingVersionMinor,omitempty"`
	CreatingVersionPatch uint32     `protobuf:"varint,6,opt,name=creatingVersionPatch,proto3" json:"creatingVersionPatch,omitempty"`
	Alpha                *url.URL   `protobuf:"bytes,7,opt,name=alpha" json:"alpha,omitempty"`
	Beta                 *url.URL   `protobuf:"bytes,8,opt,name=beta" json:"beta,omitempty"`
	Ignores              []string   `protobuf:"bytes,9,rep,name=ignores" json:"ignores,omitempty"`
	Paused               bool       `protobuf:"varint,10,opt,name=paused,proto3" json:"paused,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{0} }

func (m *Session) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Session) GetVersion() Version {
	if m != nil {
		return m.Version
	}
	return Version_Unknown
}

func (m *Session) GetCreationTime() *time.Time {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *Session) GetCreatingVersionMajor() uint32 {
	if m != nil {
		return m.CreatingVersionMajor
	}
	return 0
}

func (m *Session) GetCreatingVersionMinor() uint32 {
	if m != nil {
		return m.CreatingVersionMinor
	}
	return 0
}

func (m *Session) GetCreatingVersionPatch() uint32 {
	if m != nil {
		return m.CreatingVersionPatch
	}
	return 0
}

func (m *Session) GetAlpha() *url.URL {
	if m != nil {
		return m.Alpha
	}
	return nil
}

func (m *Session) GetBeta() *url.URL {
	if m != nil {
		return m.Beta
	}
	return nil
}

func (m *Session) GetIgnores() []string {
	if m != nil {
		return m.Ignores
	}
	return nil
}

func (m *Session) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

type Archive struct {
	Root *sync.Entry `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
}

func (m *Archive) Reset()                    { *m = Archive{} }
func (m *Archive) String() string            { return proto.CompactTextString(m) }
func (*Archive) ProtoMessage()               {}
func (*Archive) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{1} }

func (m *Archive) GetRoot() *sync.Entry {
	if m != nil {
		return m.Root
	}
	return nil
}

type StableEntry struct {
	Kind       sync.EntryKind        `protobuf:"varint,1,opt,name=kind,proto3,enum=sync.EntryKind" json:"kind,omitempty"`
	Executable bool                  `protobuf:"varint,2,opt,name=executable,proto3" json:"executable,omitempty"`
	Digest     []byte                `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Contents   []*StableEntryContent `protobuf:"bytes,4,rep,name=contents" json:"contents,omitempty"`
}

func (m *StableEntry) Reset()                    { *m = StableEntry{} }
func (m *StableEntry) String() string            { return proto.CompactTextString(m) }
func (*StableEntry) ProtoMessage()               {}
func (*StableEntry) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{2} }

func (m *StableEntry) GetKind() sync.EntryKind {
	if m != nil {
		return m.Kind
	}
	return sync.EntryKind_Directory
}

func (m *StableEntry) GetExecutable() bool {
	if m != nil {
		return m.Executable
	}
	return false
}

func (m *StableEntry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *StableEntry) GetContents() []*StableEntryContent {
	if m != nil {
		return m.Contents
	}
	return nil
}

type StableEntryContent struct {
	Name  string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Entry *StableEntry `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *StableEntryContent) Reset()                    { *m = StableEntryContent{} }
func (m *StableEntryContent) String() string            { return proto.CompactTextString(m) }
func (*StableEntryContent) ProtoMessage()               {}
func (*StableEntryContent) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{3} }

func (m *StableEntryContent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StableEntryContent) GetEntry() *StableEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type StableArchive struct {
	Root *StableEntry `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
}

func (m *StableArchive) Reset()                    { *m = StableArchive{} }
func (m *StableArchive) String() string            { return proto.CompactTextString(m) }
func (*StableArchive) ProtoMessage()               {}
func (*StableArchive) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{4} }

func (m *StableArchive) GetRoot() *StableEntry {
	if m != nil {
		return m.Root
	}
	return nil
}

func init() {
	proto.RegisterType((*Session)(nil), "session.Session")
	proto.RegisterType((*Archive)(nil), "session.Archive")
	proto.RegisterType((*StableEntry)(nil), "session.StableEntry")
	proto.RegisterType((*StableEntryContent)(nil), "session.StableEntryContent")
	proto.RegisterType((*StableArchive)(nil), "session.StableArchive")
	proto.RegisterEnum("session.Version", Version_name, Version_value)
}

func init() { proto.RegisterFile("session.proto", fileDescriptorSession) }

var fileDescriptorSession = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x6e, 0xd3, 0x30,
	0x1c, 0x27, 0x34, 0x6b, 0xd2, 0x7f, 0xda, 0x51, 0x59, 0x13, 0xb2, 0x0a, 0x5a, 0xa3, 0xc2, 0x21,
	0x54, 0x2c, 0x11, 0xe1, 0x80, 0x38, 0xf2, 0x75, 0x02, 0x24, 0xe4, 0x75, 0xdc, 0xdd, 0xd4, 0x4b,
	0xcd, 0x1a, 0xbb, 0x72, 0x9c, 0xc2, 0xde, 0x82, 0x77, 0xe0, 0xc0, 0x63, 0xf1, 0x2a, 0x28, 0x76,
	0x32, 0x32, 0x88, 0x38, 0x54, 0xf2, 0xef, 0xab, 0xf9, 0x7f, 0xc1, 0xa4, 0x64, 0x65, 0xc9, 0xa5,
	0x88, 0xf7, 0x4a, 0x6a, 0x89, 0xbc, 0x06, 0xce, 0xe6, 0xb9, 0x94, 0xf9, 0x8e, 0x25, 0x86, 0x5e,
	0x57, 0x97, 0x89, 0xe6, 0x05, 0x2b, 0x35, 0x2d, 0xf6, 0xd6, 0x39, 0x3b, 0xcb, 0xb9, 0xde, 0x56,
	0xeb, 0x38, 0x93, 0x45, 0x92, 0xcb, 0x5c, 0xfe, 0x71, 0xd6, 0xc8, 0x00, 0xf3, 0x6a, 0xec, 0x4f,
	0x3b, 0xf6, 0x2d, 0x3d, 0xc8, 0xec, 0x8c, 0xcb, 0xa4, 0xa8, 0x34, 0xcd, 0x99, 0x48, 0xca, 0x6b,
	0x91, 0x25, 0x4c, 0x68, 0x75, 0xdd, 0xb8, 0x9f, 0xfc, 0xcf, 0x5d, 0xa9, 0x5d, 0xfd, 0xb3, 0xd6,
	0xc5, 0xcf, 0x01, 0x78, 0xe7, 0xb6, 0x68, 0x74, 0x0a, 0xc0, 0x37, 0x4c, 0x68, 0x7e, 0xc9, 0x99,
	0xc2, 0x4e, 0xe8, 0x44, 0x23, 0xd2, 0x61, 0xd0, 0x12, 0xbc, 0x03, 0x53, 0xb5, 0x15, 0xdf, 0x0d,
	0x9d, 0xe8, 0x38, 0x9d, 0xc6, 0x6d, 0xfb, 0x9f, 0x2d, 0x4f, 0x5a, 0x03, 0x7a, 0x0b, 0xe3, 0x4c,
	0x31, 0xaa, 0xb9, 0x14, 0x2b, 0x5e, 0x30, 0x3c, 0x08, 0x9d, 0x28, 0x48, 0x67, 0xb1, 0x9d, 0x4b,
	0xdc, 0x76, 0x1b, 0xaf, 0xda, 0xb9, 0xbc, 0x76, 0xbf, 0xff, 0x9a, 0x3b, 0xe4, 0x56, 0x0a, 0xa5,
	0x70, 0x62, 0xb1, 0xc8, 0x9b, 0x2f, 0x7c, 0xa4, 0x5f, 0xa4, 0xc2, 0x6e, 0xe8, 0x44, 0x13, 0xd2,
	0xab, 0xf5, 0x65, 0xb8, 0x90, 0x0a, 0x1f, 0xf5, 0x67, 0x6a, 0xad, 0x27, 0xf3, 0x89, 0xea, 0x6c,
	0x8b, 0x87, 0xbd, 0x19, 0xa3, 0xa1, 0x53, 0x38, 0xa2, 0xbb, 0xfd, 0x96, 0x62, 0xcf, 0xb4, 0xe6,
	0xc7, 0xf5, 0x50, 0x2f, 0xc8, 0x07, 0x62, 0x69, 0xf4, 0x10, 0xdc, 0x35, 0xd3, 0x14, 0xfb, 0x7f,
	0xc9, 0x86, 0x45, 0x18, 0x3c, 0x9e, 0x0b, 0xa9, 0x58, 0x89, 0x47, 0xe1, 0x20, 0x1a, 0x91, 0x16,
	0xa2, 0xfb, 0x30, 0xdc, 0xd3, 0xaa, 0x64, 0x1b, 0x0c, 0xa1, 0x13, 0xf9, 0xa4, 0x41, 0x8b, 0x25,
	0x78, 0xaf, 0x54, 0xb6, 0xe5, 0x07, 0x86, 0xe6, 0xe0, 0x2a, 0x29, 0xb5, 0x59, 0x51, 0x90, 0x06,
	0x71, 0x7d, 0x00, 0xf1, 0xbb, 0xfa, 0x00, 0x88, 0x11, 0x16, 0x3f, 0x1c, 0x08, 0xce, 0x35, 0x5d,
	0xef, 0x98, 0x61, 0xd1, 0x23, 0x70, 0xaf, 0xb8, 0xd8, 0x98, 0xc0, 0x71, 0x7a, 0xaf, 0x13, 0x78,
	0xcf, 0xc5, 0x86, 0x18, 0xb1, 0x5e, 0x3f, 0xfb, 0xc6, 0xb2, 0xca, 0xe4, 0xcc, 0x86, 0x7d, 0xd2,
	0x61, 0xea, 0xc2, 0x36, 0x3c, 0x67, 0xa5, 0x36, 0xcb, 0x1c, 0x93, 0x06, 0xa1, 0x17, 0xe0, 0x67,
	0x52, 0x68, 0x26, 0x74, 0x89, 0xdd, 0x70, 0x10, 0x05, 0xe9, 0x83, 0x9b, 0xbb, 0xe8, 0x14, 0xf1,
	0xc6, 0x7a, 0xc8, 0x8d, 0x79, 0xb1, 0x02, 0xf4, 0xaf, 0x8e, 0x10, 0xb8, 0x82, 0x16, 0xac, 0xb9,
	0x3f, 0xf3, 0x46, 0x4b, 0x38, 0x32, 0xf7, 0x6d, 0xaa, 0x0a, 0xd2, 0x93, 0xbe, 0xff, 0x27, 0xd6,
	0xb2, 0x78, 0x09, 0x13, 0xcb, 0xb6, 0xd3, 0x8a, 0x6e, 0x4d, 0xab, 0x3f, 0x6b, 0x1c, 0xcb, 0xc7,
	0xe0, 0x35, 0x2b, 0x46, 0x01, 0x78, 0x17, 0xe2, 0x4a, 0xc8, 0xaf, 0x62, 0x7a, 0x07, 0x8d, 0xc1,
	0x6f, 0xf8, 0x67, 0x53, 0x67, 0x3d, 0x34, 0xc7, 0xfb, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x82, 0x25, 0xb6, 0xf1, 0xfc, 0x03, 0x00, 0x00,
}
