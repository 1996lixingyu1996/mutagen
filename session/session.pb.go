// Code generated by protoc-gen-gogo.
// source: session.proto
// DO NOT EDIT!

/*
	Package session is a generated protocol buffer package.

	It is generated from these files:
		session.proto

	It has these top-level messages:
		Session
		SynchronizationState
		SessionState
		StartRequest
		StartResponse
		ListRequest
		ListResponse
		PauseRequest
		PauseResponse
		ResumeRequest
		ResumeResponse
		StopRequest
		StopResponse
		InitializeRequest
		InitializeResponse
		WatchRequest
		WatchResponse
		StageRequest
		StageResponse
		TransmitRequest
		TransmitResponse
		SnapshotRequest
		SnapshotResponse
*/
package session

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import rsync "github.com/havoc-io/mutagen/rsync"

import time "time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionVersion int32

const (
	SessionVersion_Unknown  SessionVersion = 0
	SessionVersion_Version1 SessionVersion = 1
)

var SessionVersion_name = map[int32]string{
	0: "Unknown",
	1: "Version1",
}
var SessionVersion_value = map[string]int32{
	"Unknown":  0,
	"Version1": 1,
}

func (x SessionVersion) String() string {
	return proto.EnumName(SessionVersion_name, int32(x))
}
func (SessionVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{0} }

type SynchronizationAction int32

const (
	SynchronizationAction_Connecting         SynchronizationAction = 0
	SynchronizationAction_ProbingAlpha       SynchronizationAction = 1
	SynchronizationAction_ProbingBeta        SynchronizationAction = 2
	SynchronizationAction_Watching           SynchronizationAction = 3
	SynchronizationAction_SnapshottingAlpha  SynchronizationAction = 4
	SynchronizationAction_SnapshottingBeta   SynchronizationAction = 5
	SynchronizationAction_Reconciling        SynchronizationAction = 6
	SynchronizationAction_StagingAlphaToBeta SynchronizationAction = 7
	SynchronizationAction_StagingBetaToAlpha SynchronizationAction = 8
	SynchronizationAction_ApplyingAlpha      SynchronizationAction = 9
	SynchronizationAction_ApplyingBeta       SynchronizationAction = 10
	SynchronizationAction_Saving             SynchronizationAction = 11
)

var SynchronizationAction_name = map[int32]string{
	0:  "Connecting",
	1:  "ProbingAlpha",
	2:  "ProbingBeta",
	3:  "Watching",
	4:  "SnapshottingAlpha",
	5:  "SnapshottingBeta",
	6:  "Reconciling",
	7:  "StagingAlphaToBeta",
	8:  "StagingBetaToAlpha",
	9:  "ApplyingAlpha",
	10: "ApplyingBeta",
	11: "Saving",
}
var SynchronizationAction_value = map[string]int32{
	"Connecting":         0,
	"ProbingAlpha":       1,
	"ProbingBeta":        2,
	"Watching":           3,
	"SnapshottingAlpha":  4,
	"SnapshottingBeta":   5,
	"Reconciling":        6,
	"StagingAlphaToBeta": 7,
	"StagingBetaToAlpha": 8,
	"ApplyingAlpha":      9,
	"ApplyingBeta":       10,
	"Saving":             11,
}

func (x SynchronizationAction) String() string {
	return proto.EnumName(SynchronizationAction_name, int32(x))
}
func (SynchronizationAction) EnumDescriptor() ([]byte, []int) { return fileDescriptorSession, []int{1} }

type Session struct {
	Identifier           string         `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Version              SessionVersion `protobuf:"varint,2,opt,name=version,proto3,enum=session.SessionVersion" json:"version,omitempty"`
	CreationTime         *time.Time     `protobuf:"bytes,3,opt,name=creationTime,stdtime" json:"creationTime,omitempty"`
	CreatingVersionMajor uint32         `protobuf:"varint,4,opt,name=creatingVersionMajor,proto3" json:"creatingVersionMajor,omitempty"`
	CreatingVersionMinor uint32         `protobuf:"varint,5,opt,name=creatingVersionMinor,proto3" json:"creatingVersionMinor,omitempty"`
	CreatingVersionPatch uint32         `protobuf:"varint,6,opt,name=creatingVersionPatch,proto3" json:"creatingVersionPatch,omitempty"`
	Alpha                string         `protobuf:"bytes,7,opt,name=alpha,proto3" json:"alpha,omitempty"`
	Beta                 string         `protobuf:"bytes,8,opt,name=beta,proto3" json:"beta,omitempty"`
	Paused               bool           `protobuf:"varint,9,opt,name=paused,proto3" json:"paused,omitempty"`
	Error                string         `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{0} }

func (m *Session) GetCreationTime() *time.Time {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

type SynchronizationState struct {
	Action  SynchronizationAction `protobuf:"varint,1,opt,name=action,proto3,enum=session.SynchronizationAction" json:"action,omitempty"`
	Message string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SynchronizationState) Reset()                    { *m = SynchronizationState{} }
func (m *SynchronizationState) String() string            { return proto.CompactTextString(m) }
func (*SynchronizationState) ProtoMessage()               {}
func (*SynchronizationState) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{1} }

type SessionState struct {
	Session              *Session              `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	SynchronizationState *SynchronizationState `protobuf:"bytes,2,opt,name=synchronizationState" json:"synchronizationState,omitempty"`
}

func (m *SessionState) Reset()                    { *m = SessionState{} }
func (m *SessionState) String() string            { return proto.CompactTextString(m) }
func (*SessionState) ProtoMessage()               {}
func (*SessionState) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{2} }

func (m *SessionState) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *SessionState) GetSynchronizationState() *SynchronizationState {
	if m != nil {
		return m.SynchronizationState
	}
	return nil
}

type StartRequest struct {
	Alpha    string `protobuf:"bytes,1,opt,name=alpha,proto3" json:"alpha,omitempty"`
	Beta     string `protobuf:"bytes,2,opt,name=beta,proto3" json:"beta,omitempty"`
	Prompter string `protobuf:"bytes,3,opt,name=prompter,proto3" json:"prompter,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{3} }

type StartResponse struct {
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{4} }

type ListRequest struct {
	Streaming bool `protobuf:"varint,1,opt,name=streaming,proto3" json:"streaming,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{5} }

type ListResponse struct {
	Sessions []*SessionState `protobuf:"bytes,1,rep,name=sessions" json:"sessions,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{6} }

func (m *ListResponse) GetSessions() []*SessionState {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type PauseRequest struct {
	SessionIdentifier string `protobuf:"bytes,1,opt,name=sessionIdentifier,proto3" json:"sessionIdentifier,omitempty"`
}

func (m *PauseRequest) Reset()                    { *m = PauseRequest{} }
func (m *PauseRequest) String() string            { return proto.CompactTextString(m) }
func (*PauseRequest) ProtoMessage()               {}
func (*PauseRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{7} }

type PauseResponse struct {
}

func (m *PauseResponse) Reset()                    { *m = PauseResponse{} }
func (m *PauseResponse) String() string            { return proto.CompactTextString(m) }
func (*PauseResponse) ProtoMessage()               {}
func (*PauseResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{8} }

type ResumeRequest struct {
	SessionIdentifier string `protobuf:"bytes,1,opt,name=sessionIdentifier,proto3" json:"sessionIdentifier,omitempty"`
	Prompter          string `protobuf:"bytes,2,opt,name=prompter,proto3" json:"prompter,omitempty"`
}

func (m *ResumeRequest) Reset()                    { *m = ResumeRequest{} }
func (m *ResumeRequest) String() string            { return proto.CompactTextString(m) }
func (*ResumeRequest) ProtoMessage()               {}
func (*ResumeRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{9} }

type ResumeResponse struct {
}

func (m *ResumeResponse) Reset()                    { *m = ResumeResponse{} }
func (m *ResumeResponse) String() string            { return proto.CompactTextString(m) }
func (*ResumeResponse) ProtoMessage()               {}
func (*ResumeResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{10} }

type StopRequest struct {
	SessionIdentifier string `protobuf:"bytes,1,opt,name=sessionIdentifier,proto3" json:"sessionIdentifier,omitempty"`
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{11} }

type StopResponse struct {
}

func (m *StopResponse) Reset()                    { *m = StopResponse{} }
func (m *StopResponse) String() string            { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()               {}
func (*StopResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{12} }

type InitializeRequest struct {
	Session string         `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Version SessionVersion `protobuf:"varint,2,opt,name=version,proto3,enum=session.SessionVersion" json:"version,omitempty"`
	Root    string         `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	Alpha   bool           `protobuf:"varint,4,opt,name=alpha,proto3" json:"alpha,omitempty"`
}

func (m *InitializeRequest) Reset()                    { *m = InitializeRequest{} }
func (m *InitializeRequest) String() string            { return proto.CompactTextString(m) }
func (*InitializeRequest) ProtoMessage()               {}
func (*InitializeRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{13} }

type InitializeResponse struct {
	DecomposesUnicode      bool `protobuf:"varint,1,opt,name=decomposesUnicode,proto3" json:"decomposesUnicode,omitempty"`
	PreservesExecutability bool `protobuf:"varint,2,opt,name=preservesExecutability,proto3" json:"preservesExecutability,omitempty"`
}

func (m *InitializeResponse) Reset()                    { *m = InitializeResponse{} }
func (m *InitializeResponse) String() string            { return proto.CompactTextString(m) }
func (*InitializeResponse) ProtoMessage()               {}
func (*InitializeResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{14} }

type WatchRequest struct {
}

func (m *WatchRequest) Reset()                    { *m = WatchRequest{} }
func (m *WatchRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()               {}
func (*WatchRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{15} }

type WatchResponse struct {
}

func (m *WatchResponse) Reset()                    { *m = WatchResponse{} }
func (m *WatchResponse) String() string            { return proto.CompactTextString(m) }
func (*WatchResponse) ProtoMessage()               {}
func (*WatchResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{16} }

type StageRequest struct {
	Path       string           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Executable bool             `protobuf:"varint,2,opt,name=executable,proto3" json:"executable,omitempty"`
	Digest     []byte           `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Operation  *rsync.Operation `protobuf:"bytes,4,opt,name=operation" json:"operation,omitempty"`
}

func (m *StageRequest) Reset()                    { *m = StageRequest{} }
func (m *StageRequest) String() string            { return proto.CompactTextString(m) }
func (*StageRequest) ProtoMessage()               {}
func (*StageRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{17} }

func (m *StageRequest) GetOperation() *rsync.Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

type StageResponse struct {
	AlreadyStaged bool               `protobuf:"varint,1,opt,name=alreadyStaged,proto3" json:"alreadyStaged,omitempty"`
	BaseSignature []*rsync.BlockHash `protobuf:"bytes,2,rep,name=baseSignature" json:"baseSignature,omitempty"`
}

func (m *StageResponse) Reset()                    { *m = StageResponse{} }
func (m *StageResponse) String() string            { return proto.CompactTextString(m) }
func (*StageResponse) ProtoMessage()               {}
func (*StageResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{18} }

func (m *StageResponse) GetBaseSignature() []*rsync.BlockHash {
	if m != nil {
		return m.BaseSignature
	}
	return nil
}

type TransmitRequest struct {
	Path          string             `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	BaseSignature []*rsync.BlockHash `protobuf:"bytes,2,rep,name=baseSignature" json:"baseSignature,omitempty"`
}

func (m *TransmitRequest) Reset()                    { *m = TransmitRequest{} }
func (m *TransmitRequest) String() string            { return proto.CompactTextString(m) }
func (*TransmitRequest) ProtoMessage()               {}
func (*TransmitRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{19} }

func (m *TransmitRequest) GetBaseSignature() []*rsync.BlockHash {
	if m != nil {
		return m.BaseSignature
	}
	return nil
}

type TransmitResponse struct {
	Operation *rsync.Operation `protobuf:"bytes,1,opt,name=operation" json:"operation,omitempty"`
}

func (m *TransmitResponse) Reset()                    { *m = TransmitResponse{} }
func (m *TransmitResponse) String() string            { return proto.CompactTextString(m) }
func (*TransmitResponse) ProtoMessage()               {}
func (*TransmitResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{20} }

func (m *TransmitResponse) GetOperation() *rsync.Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

type SnapshotRequest struct {
	BaseSignature []*rsync.BlockHash `protobuf:"bytes,1,rep,name=baseSignature" json:"baseSignature,omitempty"`
}

func (m *SnapshotRequest) Reset()                    { *m = SnapshotRequest{} }
func (m *SnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRequest) ProtoMessage()               {}
func (*SnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{21} }

func (m *SnapshotRequest) GetBaseSignature() []*rsync.BlockHash {
	if m != nil {
		return m.BaseSignature
	}
	return nil
}

type SnapshotResponse struct {
	Operations []*rsync.Operation `protobuf:"bytes,1,rep,name=operations" json:"operations,omitempty"`
}

func (m *SnapshotResponse) Reset()                    { *m = SnapshotResponse{} }
func (m *SnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*SnapshotResponse) ProtoMessage()               {}
func (*SnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{22} }

func (m *SnapshotResponse) GetOperations() []*rsync.Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func init() {
	proto.RegisterType((*Session)(nil), "session.Session")
	proto.RegisterType((*SynchronizationState)(nil), "session.SynchronizationState")
	proto.RegisterType((*SessionState)(nil), "session.SessionState")
	proto.RegisterType((*StartRequest)(nil), "session.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "session.StartResponse")
	proto.RegisterType((*ListRequest)(nil), "session.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "session.ListResponse")
	proto.RegisterType((*PauseRequest)(nil), "session.PauseRequest")
	proto.RegisterType((*PauseResponse)(nil), "session.PauseResponse")
	proto.RegisterType((*ResumeRequest)(nil), "session.ResumeRequest")
	proto.RegisterType((*ResumeResponse)(nil), "session.ResumeResponse")
	proto.RegisterType((*StopRequest)(nil), "session.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "session.StopResponse")
	proto.RegisterType((*InitializeRequest)(nil), "session.InitializeRequest")
	proto.RegisterType((*InitializeResponse)(nil), "session.InitializeResponse")
	proto.RegisterType((*WatchRequest)(nil), "session.WatchRequest")
	proto.RegisterType((*WatchResponse)(nil), "session.WatchResponse")
	proto.RegisterType((*StageRequest)(nil), "session.StageRequest")
	proto.RegisterType((*StageResponse)(nil), "session.StageResponse")
	proto.RegisterType((*TransmitRequest)(nil), "session.TransmitRequest")
	proto.RegisterType((*TransmitResponse)(nil), "session.TransmitResponse")
	proto.RegisterType((*SnapshotRequest)(nil), "session.SnapshotRequest")
	proto.RegisterType((*SnapshotResponse)(nil), "session.SnapshotResponse")
	proto.RegisterEnum("session.SessionVersion", SessionVersion_name, SessionVersion_value)
	proto.RegisterEnum("session.SynchronizationAction", SynchronizationAction_name, SynchronizationAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sessions service

type SessionsClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Sessions_ListClient, error)
	Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error)
	Resume(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*ResumeResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type sessionsClient struct {
	cc *grpc.ClientConn
}

func NewSessionsClient(cc *grpc.ClientConn) SessionsClient {
	return &sessionsClient{cc}
}

func (c *sessionsClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/session.Sessions/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Sessions_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sessions_serviceDesc.Streams[0], c.cc, "/session.Sessions/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sessions_ListClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type sessionsListClient struct {
	grpc.ClientStream
}

func (x *sessionsListClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sessionsClient) Pause(ctx context.Context, in *PauseRequest, opts ...grpc.CallOption) (*PauseResponse, error) {
	out := new(PauseResponse)
	err := grpc.Invoke(ctx, "/session.Sessions/Pause", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsClient) Resume(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*ResumeResponse, error) {
	out := new(ResumeResponse)
	err := grpc.Invoke(ctx, "/session.Sessions/Resume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := grpc.Invoke(ctx, "/session.Sessions/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sessions service

type SessionsServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	List(*ListRequest, Sessions_ListServer) error
	Pause(context.Context, *PauseRequest) (*PauseResponse, error)
	Resume(context.Context, *ResumeRequest) (*ResumeResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
}

func RegisterSessionsServer(s *grpc.Server, srv SessionsServer) {
	s.RegisterService(&_Sessions_serviceDesc, srv)
}

func _Sessions_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Sessions/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sessions_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SessionsServer).List(m, &sessionsListServer{stream})
}

type Sessions_ListServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type sessionsListServer struct {
	grpc.ServerStream
}

func (x *sessionsListServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Sessions_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServer).Pause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Sessions/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServer).Pause(ctx, req.(*PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sessions_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Sessions/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServer).Resume(ctx, req.(*ResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sessions_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Sessions/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sessions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "session.Sessions",
	HandlerType: (*SessionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Sessions_Start_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Sessions_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Sessions_Resume_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Sessions_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Sessions_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "session.proto",
}

// Client API for Endpoint service

type EndpointClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Endpoint_WatchClient, error)
	Stage(ctx context.Context, opts ...grpc.CallOption) (Endpoint_StageClient, error)
	Transmit(ctx context.Context, in *TransmitRequest, opts ...grpc.CallOption) (Endpoint_TransmitClient, error)
	Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
}

type endpointClient struct {
	cc *grpc.ClientConn
}

func NewEndpointClient(cc *grpc.ClientConn) EndpointClient {
	return &endpointClient{cc}
}

func (c *endpointClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := grpc.Invoke(ctx, "/session.Endpoint/Initialize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Endpoint_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Endpoint_serviceDesc.Streams[0], c.cc, "/session.Endpoint/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Endpoint_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type endpointWatchClient struct {
	grpc.ClientStream
}

func (x *endpointWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *endpointClient) Stage(ctx context.Context, opts ...grpc.CallOption) (Endpoint_StageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Endpoint_serviceDesc.Streams[1], c.cc, "/session.Endpoint/Stage", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointStageClient{stream}
	return x, nil
}

type Endpoint_StageClient interface {
	Send(*StageRequest) error
	Recv() (*StageResponse, error)
	grpc.ClientStream
}

type endpointStageClient struct {
	grpc.ClientStream
}

func (x *endpointStageClient) Send(m *StageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *endpointStageClient) Recv() (*StageResponse, error) {
	m := new(StageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *endpointClient) Transmit(ctx context.Context, in *TransmitRequest, opts ...grpc.CallOption) (Endpoint_TransmitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Endpoint_serviceDesc.Streams[2], c.cc, "/session.Endpoint/Transmit", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointTransmitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Endpoint_TransmitClient interface {
	Recv() (*TransmitResponse, error)
	grpc.ClientStream
}

type endpointTransmitClient struct {
	grpc.ClientStream
}

func (x *endpointTransmitClient) Recv() (*TransmitResponse, error) {
	m := new(TransmitResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *endpointClient) Snapshot(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := grpc.Invoke(ctx, "/session.Endpoint/Snapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Endpoint service

type EndpointServer interface {
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	Watch(*WatchRequest, Endpoint_WatchServer) error
	Stage(Endpoint_StageServer) error
	Transmit(*TransmitRequest, Endpoint_TransmitServer) error
	Snapshot(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
}

func RegisterEndpointServer(s *grpc.Server, srv EndpointServer) {
	s.RegisterService(&_Endpoint_serviceDesc, srv)
}

func _Endpoint_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Endpoint/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EndpointServer).Watch(m, &endpointWatchServer{stream})
}

type Endpoint_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type endpointWatchServer struct {
	grpc.ServerStream
}

func (x *endpointWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Endpoint_Stage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EndpointServer).Stage(&endpointStageServer{stream})
}

type Endpoint_StageServer interface {
	Send(*StageResponse) error
	Recv() (*StageRequest, error)
	grpc.ServerStream
}

type endpointStageServer struct {
	grpc.ServerStream
}

func (x *endpointStageServer) Send(m *StageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *endpointStageServer) Recv() (*StageRequest, error) {
	m := new(StageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Endpoint_Transmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransmitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EndpointServer).Transmit(m, &endpointTransmitServer{stream})
}

type Endpoint_TransmitServer interface {
	Send(*TransmitResponse) error
	grpc.ServerStream
}

type endpointTransmitServer struct {
	grpc.ServerStream
}

func (x *endpointTransmitServer) Send(m *TransmitResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Endpoint_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.Endpoint/Snapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).Snapshot(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Endpoint_serviceDesc = grpc.ServiceDesc{
	ServiceName: "session.Endpoint",
	HandlerType: (*EndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _Endpoint_Initialize_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _Endpoint_Snapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Endpoint_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stage",
			Handler:       _Endpoint_Stage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Transmit",
			Handler:       _Endpoint_Transmit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "session.proto",
}

func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Identifier)))
		i += copy(dAtA[i:], m.Identifier)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Version))
	}
	if m.CreationTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreationTime)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreationTime, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CreatingVersionMajor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.CreatingVersionMajor))
	}
	if m.CreatingVersionMinor != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.CreatingVersionMinor))
	}
	if m.CreatingVersionPatch != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.CreatingVersionPatch))
	}
	if len(m.Alpha) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Alpha)))
		i += copy(dAtA[i:], m.Alpha)
	}
	if len(m.Beta) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Beta)))
		i += copy(dAtA[i:], m.Beta)
	}
	if m.Paused {
		dAtA[i] = 0x48
		i++
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *SynchronizationState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SynchronizationState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Action))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *SessionState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Session != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Session.Size()))
		n2, err := m.Session.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SynchronizationState != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.SynchronizationState.Size()))
		n3, err := m.SynchronizationState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *StartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Alpha) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Alpha)))
		i += copy(dAtA[i:], m.Alpha)
	}
	if len(m.Beta) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Beta)))
		i += copy(dAtA[i:], m.Beta)
	}
	if len(m.Prompter) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Prompter)))
		i += copy(dAtA[i:], m.Prompter)
	}
	return i, nil
}

func (m *StartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Streaming {
		dAtA[i] = 0x8
		i++
		if m.Streaming {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sessions) > 0 {
		for _, msg := range m.Sessions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PauseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionIdentifier) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.SessionIdentifier)))
		i += copy(dAtA[i:], m.SessionIdentifier)
	}
	return i, nil
}

func (m *PauseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResumeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionIdentifier) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.SessionIdentifier)))
		i += copy(dAtA[i:], m.SessionIdentifier)
	}
	if len(m.Prompter) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Prompter)))
		i += copy(dAtA[i:], m.Prompter)
	}
	return i, nil
}

func (m *ResumeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResumeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StopRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionIdentifier) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.SessionIdentifier)))
		i += copy(dAtA[i:], m.SessionIdentifier)
	}
	return i, nil
}

func (m *StopResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InitializeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitializeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Session) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Session)))
		i += copy(dAtA[i:], m.Session)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Version))
	}
	if len(m.Root) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Root)))
		i += copy(dAtA[i:], m.Root)
	}
	if m.Alpha {
		dAtA[i] = 0x20
		i++
		if m.Alpha {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *InitializeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitializeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DecomposesUnicode {
		dAtA[i] = 0x8
		i++
		if m.DecomposesUnicode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PreservesExecutability {
		dAtA[i] = 0x10
		i++
		if m.PreservesExecutability {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *WatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.Executable {
		dAtA[i] = 0x10
		i++
		if m.Executable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Digest) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Digest)))
		i += copy(dAtA[i:], m.Digest)
	}
	if m.Operation != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Operation.Size()))
		n4, err := m.Operation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *StageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AlreadyStaged {
		dAtA[i] = 0x8
		i++
		if m.AlreadyStaged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.BaseSignature) > 0 {
		for _, msg := range m.BaseSignature {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TransmitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransmitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if len(m.BaseSignature) > 0 {
		for _, msg := range m.BaseSignature {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TransmitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransmitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Operation.Size()))
		n5, err := m.Operation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *SnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseSignature) > 0 {
		for _, msg := range m.BaseSignature {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Operations) > 0 {
		for _, msg := range m.Operations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Session(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Session(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSession(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Session) Size() (n int) {
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovSession(uint64(m.Version))
	}
	if m.CreationTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreationTime)
		n += 1 + l + sovSession(uint64(l))
	}
	if m.CreatingVersionMajor != 0 {
		n += 1 + sovSession(uint64(m.CreatingVersionMajor))
	}
	if m.CreatingVersionMinor != 0 {
		n += 1 + sovSession(uint64(m.CreatingVersionMinor))
	}
	if m.CreatingVersionPatch != 0 {
		n += 1 + sovSession(uint64(m.CreatingVersionPatch))
	}
	l = len(m.Alpha)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.Beta)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Paused {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SynchronizationState) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovSession(uint64(m.Action))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionState) Size() (n int) {
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.SynchronizationState != nil {
		l = m.SynchronizationState.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *StartRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Alpha)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.Beta)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.Prompter)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *StartResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Streaming {
		n += 2
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *PauseRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionIdentifier)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *PauseResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResumeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionIdentifier)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.Prompter)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *ResumeResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StopRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionIdentifier)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *StopResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InitializeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Session)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovSession(uint64(m.Version))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Alpha {
		n += 2
	}
	return n
}

func (m *InitializeResponse) Size() (n int) {
	var l int
	_ = l
	if m.DecomposesUnicode {
		n += 2
	}
	if m.PreservesExecutability {
		n += 2
	}
	return n
}

func (m *WatchRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WatchResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StageRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Executable {
		n += 2
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *StageResponse) Size() (n int) {
	var l int
	_ = l
	if m.AlreadyStaged {
		n += 2
	}
	if len(m.BaseSignature) > 0 {
		for _, e := range m.BaseSignature {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *TransmitRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if len(m.BaseSignature) > 0 {
		for _, e := range m.BaseSignature {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *TransmitResponse) Size() (n int) {
	var l int
	_ = l
	if m.Operation != nil {
		l = m.Operation.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SnapshotRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.BaseSignature) > 0 {
		for _, e := range m.BaseSignature {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func (m *SnapshotResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func sovSession(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSession(x uint64) (n int) {
	return sovSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (SessionVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationTime == nil {
				m.CreationTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatingVersionMajor", wireType)
			}
			m.CreatingVersionMajor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatingVersionMajor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatingVersionMinor", wireType)
			}
			m.CreatingVersionMinor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatingVersionMinor |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatingVersionPatch", wireType)
			}
			m.CreatingVersionPatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatingVersionPatch |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alpha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SynchronizationState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SynchronizationState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SynchronizationState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (SynchronizationAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SynchronizationState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SynchronizationState == nil {
				m.SynchronizationState = &SynchronizationState{}
			}
			if err := m.SynchronizationState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alpha", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alpha = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prompter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prompter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streaming", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Streaming = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, &SessionState{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prompter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prompter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResumeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResumeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResumeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitializeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitializeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitializeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Session = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (SessionVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alpha", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Alpha = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitializeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitializeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitializeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecomposesUnicode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DecomposesUnicode = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreservesExecutability", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreservesExecutability = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executable = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &rsync.Operation{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlreadyStaged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AlreadyStaged = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseSignature = append(m.BaseSignature, &rsync.BlockHash{})
			if err := m.BaseSignature[len(m.BaseSignature)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransmitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransmitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransmitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseSignature = append(m.BaseSignature, &rsync.BlockHash{})
			if err := m.BaseSignature[len(m.BaseSignature)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransmitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransmitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransmitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operation == nil {
				m.Operation = &rsync.Operation{}
			}
			if err := m.Operation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseSignature = append(m.BaseSignature, &rsync.BlockHash{})
			if err := m.BaseSignature[len(m.BaseSignature)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &rsync.Operation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSession
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSession
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSession(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSession = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSession   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("session.proto", fileDescriptorSession) }

var fileDescriptorSession = []byte{
	// 1196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x8e, 0x1b, 0xc5,
	0x13, 0xdf, 0xd9, 0xf5, 0xda, 0xe3, 0xf2, 0xc7, 0x7a, 0x5b, 0xde, 0xcd, 0xfc, 0xfd, 0x07, 0xc7,
	0x1a, 0x71, 0xb0, 0xf2, 0xe1, 0x4d, 0x8c, 0x08, 0x88, 0xe4, 0xb2, 0x9b, 0x44, 0x10, 0x09, 0x44,
	0x18, 0x3b, 0x20, 0x0e, 0x1c, 0xda, 0xe3, 0xce, 0xb8, 0x89, 0xa7, 0x7b, 0x98, 0x6e, 0x2f, 0x6c,
	0x1e, 0x01, 0x09, 0x89, 0x13, 0xe2, 0x1d, 0x78, 0x11, 0x8e, 0x5c, 0x38, 0x83, 0xc2, 0x43, 0x70,
	0x45, 0xdd, 0xd3, 0xf3, 0xe5, 0x9d, 0x00, 0xda, 0x8b, 0x35, 0xf5, 0xf1, 0xab, 0xaa, 0xfe, 0x55,
	0x75, 0xb5, 0xa1, 0x23, 0x88, 0x10, 0x94, 0xb3, 0x49, 0x14, 0x73, 0xc9, 0x51, 0xc3, 0x88, 0x83,
	0xdb, 0x01, 0x95, 0xab, 0xcd, 0x62, 0xe2, 0xf3, 0xf0, 0x24, 0xe0, 0x01, 0x3f, 0xd1, 0xf6, 0xc5,
	0xe6, 0xb9, 0x96, 0xb4, 0xa0, 0xbf, 0x12, 0xdc, 0xe0, 0x7a, 0xc0, 0x79, 0xb0, 0x26, 0xb9, 0x97,
	0xa4, 0x21, 0x11, 0x12, 0x87, 0x91, 0x71, 0x28, 0xc6, 0x5b, 0xe1, 0x73, 0xee, 0xdf, 0xa6, 0xfc,
	0x24, 0xdc, 0x48, 0x1c, 0x10, 0x76, 0x12, 0x8b, 0x0b, 0xe6, 0x27, 0xbf, 0x89, 0xbb, 0xfb, 0xe3,
	0x1e, 0x34, 0x66, 0x49, 0x29, 0x68, 0x08, 0x40, 0x97, 0x84, 0x49, 0xfa, 0x9c, 0x92, 0xd8, 0xb1,
	0x46, 0xd6, 0xb8, 0xe9, 0x15, 0x34, 0xe8, 0x2e, 0x34, 0xce, 0x49, 0xac, 0x5c, 0x9d, 0xdd, 0x91,
	0x35, 0xee, 0x4e, 0xaf, 0x4d, 0xd2, 0x43, 0x99, 0x10, 0x9f, 0x25, 0x66, 0x2f, 0xf5, 0x43, 0x8f,
	0xa0, 0xed, 0xc7, 0x04, 0x4b, 0xca, 0xd9, 0x9c, 0x86, 0xc4, 0xd9, 0x1b, 0x59, 0xe3, 0xd6, 0x74,
	0x30, 0x49, 0x4e, 0x31, 0x49, 0x4f, 0x31, 0x99, 0xa7, 0xa7, 0x38, 0xab, 0xfd, 0xf0, 0xfb, 0x75,
	0xcb, 0x2b, 0xa1, 0xd0, 0x14, 0xfa, 0x89, 0xcc, 0x02, 0x93, 0xe1, 0x63, 0xfc, 0x15, 0x8f, 0x9d,
	0xda, 0xc8, 0x1a, 0x77, 0xbc, 0x4a, 0x5b, 0x15, 0x86, 0x32, 0x1e, 0x3b, 0xfb, 0xd5, 0x18, 0x65,
	0xab, 0xc0, 0x3c, 0xc5, 0xd2, 0x5f, 0x39, 0xf5, 0x4a, 0x8c, 0xb6, 0xa1, 0x3e, 0xec, 0xe3, 0x75,
	0xb4, 0xc2, 0x4e, 0x43, 0xf3, 0x95, 0x08, 0x08, 0x41, 0x6d, 0x41, 0x24, 0x76, 0x6c, 0xad, 0xd4,
	0xdf, 0xe8, 0x18, 0xea, 0x11, 0xde, 0x08, 0xb2, 0x74, 0x9a, 0x23, 0x6b, 0x6c, 0x7b, 0x46, 0x52,
	0x11, 0x48, 0x1c, 0xf3, 0xd8, 0x81, 0x24, 0x82, 0x16, 0xdc, 0x15, 0xf4, 0x67, 0x17, 0xcc, 0x5f,
	0xc5, 0x9c, 0xd1, 0x97, 0x9a, 0x8a, 0x99, 0xc4, 0x92, 0xa0, 0x7b, 0x50, 0xc7, 0xbe, 0x12, 0x75,
	0x83, 0xba, 0xd3, 0x61, 0xde, 0x83, 0xb2, 0xfb, 0xa9, 0xf6, 0xf2, 0x8c, 0x37, 0x72, 0xa0, 0x11,
	0x12, 0x21, 0x70, 0x40, 0x74, 0xf3, 0x9a, 0x5e, 0x2a, 0xba, 0xdf, 0x5b, 0xd0, 0x36, 0xfd, 0x4b,
	0x52, 0xdc, 0x80, 0x74, 0x3a, 0x75, 0x8e, 0xd6, 0xb4, 0xb7, 0xdd, 0x67, 0x2f, 0x75, 0x40, 0x9f,
	0x42, 0x5f, 0x54, 0x94, 0xa9, 0x73, 0xb4, 0xa6, 0x6f, 0xbe, 0xae, 0x38, 0xed, 0xe4, 0x55, 0x42,
	0xdd, 0x39, 0xb4, 0x67, 0x12, 0xc7, 0xd2, 0x23, 0x5f, 0x6f, 0x88, 0x90, 0x39, 0xc3, 0x56, 0x15,
	0xc3, 0xbb, 0x05, 0x86, 0x07, 0x60, 0x47, 0x31, 0x0f, 0x23, 0x49, 0x62, 0x3d, 0x69, 0x4d, 0x2f,
	0x93, 0xdd, 0x03, 0xe8, 0x98, 0xa8, 0x22, 0xe2, 0x4c, 0x10, 0xf7, 0x26, 0xb4, 0x3e, 0xa2, 0x22,
	0xcb, 0xf2, 0x06, 0x34, 0x85, 0x8c, 0x09, 0x0e, 0x29, 0x0b, 0x74, 0x26, 0xdb, 0xcb, 0x15, 0xee,
	0x29, 0xb4, 0x13, 0xe7, 0x04, 0x8c, 0xee, 0x82, 0x6d, 0x4e, 0x26, 0x1c, 0x6b, 0xb4, 0x37, 0x6e,
	0x4d, 0x8f, 0xb6, 0x39, 0x4a, 0x8e, 0x98, 0xb9, 0xb9, 0x0f, 0xa0, 0xfd, 0x54, 0x35, 0x3c, 0x4d,
	0x78, 0x0b, 0x0e, 0x8d, 0xed, 0xc9, 0xf6, 0xa5, 0xbb, 0x6c, 0x50, 0xe5, 0x1b, 0xb4, 0x29, 0xff,
	0x0b, 0xe8, 0x78, 0x44, 0x6c, 0xc2, 0xab, 0xc5, 0x2b, 0x51, 0xb5, 0xbb, 0x45, 0x55, 0x0f, 0xba,
	0x69, 0x68, 0x93, 0xec, 0x3e, 0xb4, 0x66, 0x92, 0x47, 0x57, 0x2b, 0xbd, 0xab, 0xfa, 0xa9, 0xc0,
	0x26, 0xd8, 0x77, 0x16, 0x1c, 0x3e, 0x61, 0x54, 0x52, 0xbc, 0xa6, 0x2f, 0xb3, 0xf2, 0x9d, 0xf2,
	0xd0, 0x35, 0xf3, 0x11, 0xbb, 0xc2, 0xda, 0x41, 0x50, 0x8b, 0x39, 0x97, 0x66, 0x08, 0xf4, 0x77,
	0x3e, 0x46, 0x35, 0xdd, 0xdc, 0x44, 0x70, 0x5f, 0x02, 0x2a, 0xd6, 0x62, 0xda, 0x7b, 0x0b, 0x0e,
	0x97, 0xc4, 0xe7, 0x61, 0xc4, 0x05, 0x11, 0xcf, 0x18, 0xf5, 0xf9, 0x92, 0x98, 0xa1, 0xb8, 0x6c,
	0x40, 0xf7, 0xe0, 0x38, 0x8a, 0x89, 0x20, 0xf1, 0x39, 0x11, 0x8f, 0xbf, 0x25, 0xfe, 0x46, 0xe2,
	0x05, 0x5d, 0x53, 0x79, 0xa1, 0xeb, 0xb5, 0xbd, 0xd7, 0x58, 0x15, 0x31, 0x9f, 0xab, 0x1d, 0x62,
	0x28, 0x50, 0x3d, 0x36, 0x72, 0xce, 0x94, 0xba, 0x0a, 0x41, 0x46, 0x12, 0x82, 0x5a, 0x84, 0xe5,
	0xca, 0x30, 0xa4, 0xbf, 0xd5, 0xd6, 0x26, 0x26, 0xec, 0x9a, 0x98, 0x8c, 0x05, 0x8d, 0x5a, 0x3b,
	0x4b, 0x1a, 0x10, 0x91, 0xb0, 0xd1, 0xf6, 0x8c, 0x84, 0x26, 0xd0, 0xe4, 0x11, 0x89, 0xf5, 0xc5,
	0xd3, 0x9c, 0xa8, 0x7b, 0x9e, 0x3c, 0x0d, 0x9f, 0xa4, 0x7a, 0x2f, 0x77, 0x71, 0x43, 0x7d, 0x81,
	0x82, 0x9c, 0xa4, 0xb7, 0xa0, 0x83, 0xd7, 0x31, 0xc1, 0xcb, 0x0b, 0xad, 0x5f, 0x1a, 0x82, 0xca,
	0x4a, 0x74, 0x0f, 0x3a, 0x0b, 0x2c, 0xc8, 0x8c, 0x06, 0x0c, 0xcb, 0x4d, 0xac, 0x2a, 0xdc, 0x2b,
	0xa4, 0x3a, 0x5b, 0x73, 0xff, 0xc5, 0x87, 0x58, 0xac, 0xbc, 0xb2, 0x9b, 0xfb, 0x25, 0x1c, 0xcc,
	0x63, 0xcc, 0x44, 0x48, 0xe5, 0x3f, 0x9d, 0xfe, 0xaa, 0xe1, 0xcf, 0xa0, 0x97, 0x87, 0x37, 0x07,
	0x2a, 0x31, 0x62, 0xfd, 0x3b, 0x23, 0x4f, 0xe0, 0x60, 0xc6, 0x70, 0x24, 0x56, 0x3c, 0x2b, 0xf1,
	0x52, 0x39, 0xd6, 0x7f, 0x2b, 0xe7, 0x11, 0xf4, 0xf2, 0x50, 0xa6, 0x9c, 0x3b, 0x00, 0x59, 0x2e,
	0xb1, 0x15, 0x28, 0xaf, 0xa7, 0xe0, 0x73, 0xe3, 0x26, 0x74, 0xcb, 0x37, 0x02, 0xb5, 0xa0, 0xf1,
	0x8c, 0xbd, 0x60, 0xfc, 0x1b, 0xd6, 0xdb, 0x41, 0x6d, 0xb0, 0x8d, 0xfe, 0x6e, 0xcf, 0xba, 0xf1,
	0x97, 0x05, 0x47, 0x95, 0x4f, 0x06, 0xea, 0x02, 0x3c, 0xe4, 0x8c, 0x11, 0x5f, 0x3d, 0x76, 0xbd,
	0x1d, 0xd4, 0x83, 0xf6, 0xd3, 0x98, 0x2f, 0x28, 0x0b, 0x4e, 0xd5, 0x9d, 0xe9, 0x59, 0xe8, 0x00,
	0x5a, 0x46, 0x73, 0x46, 0x24, 0xee, 0xed, 0xaa, 0xd0, 0x7a, 0x74, 0x15, 0x60, 0x0f, 0x1d, 0xc1,
	0x61, 0x7a, 0x1a, 0x99, 0xa1, 0x6a, 0xa8, 0x9f, 0x1f, 0x52, 0xa6, 0xd0, 0x7d, 0x15, 0xcb, 0x23,
	0x3e, 0x67, 0x3e, 0x5d, 0x2b, 0x74, 0x1d, 0x1d, 0x03, 0x52, 0xb3, 0x93, 0x02, 0xe7, 0x5c, 0x3b,
	0x36, 0x0a, 0x7a, 0xa5, 0x98, 0xf3, 0x24, 0xac, 0x8d, 0x0e, 0xa1, 0x73, 0x1a, 0x45, 0xeb, 0x8b,
	0x2c, 0x53, 0x53, 0x55, 0x9c, 0xaa, 0x34, 0x18, 0x10, 0x40, 0x7d, 0x86, 0xcf, 0x55, 0x82, 0xd6,
	0xf4, 0xe7, 0x5d, 0xb0, 0x0d, 0x4f, 0x02, 0xbd, 0x07, 0xfb, 0xfa, 0x5d, 0x40, 0x85, 0x05, 0x5e,
	0x78, 0x7d, 0x06, 0xc7, 0xdb, 0x6a, 0x73, 0x37, 0x77, 0xd0, 0xbb, 0x50, 0x53, 0x6f, 0x02, 0xea,
	0x67, 0x1e, 0x85, 0xf7, 0x64, 0x70, 0xb4, 0xa5, 0x4d, 0x61, 0x77, 0x2c, 0x95, 0x52, 0xef, 0xf2,
	0x42, 0xca, 0xe2, 0xcb, 0x50, 0x48, 0x59, 0x5e, 0xf9, 0x3b, 0xe8, 0x3e, 0xd4, 0x93, 0xcd, 0x8c,
	0x72, 0x9f, 0xd2, 0x2b, 0x30, 0xb8, 0x76, 0x49, 0x9f, 0x81, 0xdf, 0x81, 0x9a, 0xda, 0xc3, 0x85,
	0x7a, 0x0b, 0x3b, 0x7d, 0x70, 0xb4, 0xa5, 0x4d, 0x61, 0xd3, 0xdf, 0x76, 0xc1, 0x7e, 0xcc, 0x96,
	0x11, 0xa7, 0x4c, 0xa2, 0x0f, 0x00, 0xf2, 0x75, 0x89, 0x06, 0x19, 0xe6, 0xd2, 0x3e, 0x1f, 0xfc,
	0xbf, 0xd2, 0x96, 0x15, 0xf3, 0x3e, 0xec, 0xeb, 0x81, 0x29, 0x70, 0x50, 0xdc, 0x85, 0x05, 0x0e,
	0xca, 0x2b, 0x51, 0xf1, 0xf7, 0x40, 0xb7, 0x2c, 0x20, 0xe5, 0x96, 0x05, 0xa4, 0xb2, 0x65, 0x41,
	0x21, 0xeb, 0xd8, 0xba, 0x63, 0xa1, 0x87, 0x60, 0xa7, 0x37, 0x1f, 0x39, 0x99, 0xe7, 0xd6, 0xae,
	0x19, 0xfc, 0xaf, 0xc2, 0x52, 0x28, 0xe1, 0x14, 0xec, 0x74, 0x94, 0x0b, 0x41, 0xb6, 0xb6, 0x41,
	0x21, 0xc8, 0xf6, 0xe5, 0x76, 0x77, 0xce, 0x7a, 0xbf, 0xbc, 0x1a, 0x5a, 0xbf, 0xbe, 0x1a, 0x5a,
	0x7f, 0xbc, 0x1a, 0x5a, 0x3f, 0xfd, 0x39, 0xdc, 0x59, 0xd4, 0xf5, 0xdf, 0xe1, 0xb7, 0xff, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0xd5, 0xb9, 0x81, 0xfe, 0x2b, 0x0c, 0x00, 0x00,
}
