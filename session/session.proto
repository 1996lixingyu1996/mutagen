syntax = "proto3";

package session;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "google/protobuf/timestamp.proto";

import "github.com/havoc-io/mutagen/rsync/rsync.proto";
import "github.com/havoc-io/mutagen/sync/sync.proto";
import "github.com/havoc-io/mutagen/url/url.proto";

enum SessionVersion {
    Unknown = 0;
    Version1 = 1;
}

message Session {
    string identifier = 1;
    SessionVersion version = 2;
    google.protobuf.Timestamp creationTime = 3 [(gogoproto.stdtime) = true];
    uint32 creatingVersionMajor = 4;
    uint32 creatingVersionMinor = 5;
    uint32 creatingVersionPatch = 6;
    url.URL alpha = 7;
    url.URL beta = 8;
    bool paused = 9;
}

message Archive {
    sync.Entry root = 1;
}

enum SynchronizationStatus {
    Idle = 0;
    InitializingAlpha = 1;
    InitializingBeta = 2;
    Scanning = 3;
    Reconciling = 4;
    StagingAlphaToBeta = 5;
    StagingBetaToAlpha = 6;
    ApplyingAlpha = 7;
    ApplyingBeta = 8;
    Saving = 9;
    UpdatingAlpha = 10;
    UpdatingBeta = 11;
}

message StartRequest {
    url.URL alpha = 1;
    url.URL beta = 2;
    string prompter = 3;
}

message StartResponse {}

message ListRequest {
    uint64 previousStateIndex = 1;
}

message SessionState {
    Session session = 1;
    bool alphaConnected = 2;
    bool betaConnected = 3;
    SynchronizationStatus status = 4;
    string message = 5;
    repeated sync.Conflict conflicts = 6;
    repeated sync.Problem problems = 7;
}

message ListResponse {
    uint64 stateIndex = 1;
    repeated SessionState sessions = 2;
}

message PauseRequest {
    string session = 1;
}

message PauseResponse {}

message ResumeRequest {
    string session = 1;
    string prompter = 2;
}

message ResumeResponse {}

message StopRequest {
    string session = 1;
}

message StopResponse {}

service Sessions {
    rpc Start(StartRequest) returns (StartResponse) {}
    rpc List(ListRequest) returns (ListResponse) {}
    rpc Pause(PauseRequest) returns (PauseResponse) {}
    rpc Resume(ResumeRequest) returns (ResumeResponse) {}
    rpc Stop(StopRequest) returns (StopResponse) {}
}

message InitializeRequest {
    string session = 1;
    SessionVersion version = 2;
    string root = 3;
    bool alpha = 4;
    bytes archiveChecksum = 5;
    Archive archive = 6;
}

message InitializeResponse {
    bool replicaChecksumMismatch = 1;
}

message ScanRequest {
    bytes archiveChecksum = 1;
    bytes expectedSnapshotChecksum = 2;
}

message ScanResponse {
    repeated sync.Change delta = 1;
}

message StageRequest {
    string path = 1;
    bytes digest = 2;
    rsync.Operation operation = 3;
}

message StageResponse {
    bool alreadyStaged = 1;
    repeated rsync.BlockHash baseSignature = 2;
}

message TransmitRequest {
    string path = 1;
    repeated rsync.BlockHash baseSignature = 2;
}

message TransmitResponse {
    rsync.Operation operation = 1;
}

message ApplyRequest {
    repeated sync.Change transitions = 1;
}

message ApplyResponse {
    repeated sync.Change results = 1;
    repeated sync.Problem problems = 2;
}

message UpdateRequest {
    repeated sync.Change changes = 1;
}

message UpdateResponse {}

service Endpoint {
    rpc Initialize(InitializeRequest) returns (InitializeResponse) {}
    rpc Scan(ScanRequest) returns (ScanResponse) {}
    rpc Stage(stream StageRequest) returns (stream StageResponse) {}
    rpc Transmit(TransmitRequest) returns (stream TransmitResponse) {}
    rpc Apply(ApplyRequest) returns (ApplyResponse) {}
    rpc Update(UpdateRequest) returns (UpdateResponse) {}
}
