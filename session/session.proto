syntax = "proto3";

package session;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "google/protobuf/timestamp.proto";

import "github.com/havoc-io/mutagen/rsync/rsync.proto";

enum SessionVersion {
    Unknown = 0;
    Version1 = 1;
}

message Session {
    string identifier = 1;
    SessionVersion version = 2;
    google.protobuf.Timestamp creationTime = 3 [(gogoproto.stdtime) = true];
    uint32 creatingVersionMajor = 4;
    uint32 creatingVersionMinor = 5;
    uint32 creatingVersionPatch = 6;
    string alpha = 7;
    string beta = 8;
    bool paused = 9;
    string error = 10;
}

enum SynchronizationAction {
    Connecting = 0;
    ProbingAlpha = 1;
    ProbingBeta = 2;
    Watching = 3;
    SnapshottingAlpha = 4;
    SnapshottingBeta = 5;
    Reconciling = 6;
    StagingAlphaToBeta = 7;
    StagingBetaToAlpha = 8;
    ApplyingAlpha = 9;
    ApplyingBeta = 10;
    Saving = 11;
}

message SynchronizationState {
    SynchronizationAction action = 1;
    string message = 2;
}

message SessionState {
    Session session = 1;
    SynchronizationState synchronizationState = 2;
}

message StartRequest {
    string alpha = 1;
    string beta = 2;
    string prompter = 3;
}

message StartResponse {}

message ListRequest {
    bool streaming = 1;
}

message ListResponse {
    repeated SessionState sessions = 1;
}

message PauseRequest {
    string sessionIdentifier = 1;
}

message PauseResponse {}

message ResumeRequest {
    string sessionIdentifier = 1;
    string prompter = 2;
}

message ResumeResponse {}

message StopRequest {
    string sessionIdentifier = 1;
}

message StopResponse {}

service Sessions {
    rpc Start(StartRequest) returns (StartResponse) {}
    rpc List(ListRequest) returns (stream ListResponse) {}
    rpc Pause(PauseRequest) returns (PauseResponse) {}
    rpc Resume(ResumeRequest) returns (ResumeResponse) {}
    rpc Stop(StopRequest) returns (StopResponse) {}
}

message InitializeRequest {
    string session = 1;
    SessionVersion version = 2;
    string root = 3;
    bool alpha = 4;
}

message InitializeResponse {
    bool decomposesUnicode = 1;
    bool preservesExecutability = 2;
}

message WatchRequest {}

message WatchResponse {}

message StageRequest {
    string path = 1;
    bool executable = 2;
    bytes digest = 3;
    rsync.Operation operation = 4;
}

message StageResponse {
    bool alreadyStaged = 1;
    repeated rsync.BlockHash baseSignature = 2;
}

message TransmitRequest {
    string path = 1;
    repeated rsync.BlockHash baseSignature = 2;
}

message TransmitResponse {
    rsync.Operation operation = 1;
}

message SnapshotRequest {
    repeated rsync.BlockHash baseSignature = 1;
}

message SnapshotResponse {
    repeated rsync.Operation operations = 1;
}

// TODO: Add ApplyRequest and ApplyResponse once sync data structures exist.

service Endpoint {
    rpc Initialize(InitializeRequest) returns (InitializeResponse) {}
    rpc Watch(WatchRequest) returns (stream WatchResponse) {}
    rpc Stage(stream StageRequest) returns (stream StageResponse) {}
    rpc Transmit(TransmitRequest) returns (stream TransmitResponse) {}
    rpc Snapshot(SnapshotRequest) returns (SnapshotResponse) {}
    // TODO: Add Apply.
}
