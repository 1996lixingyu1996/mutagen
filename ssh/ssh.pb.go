// Code generated by protoc-gen-gogo.
// source: ssh.proto
// DO NOT EDIT!

/*
	Package ssh is a generated protocol buffer package.

	It is generated from these files:
		ssh.proto

	It has these top-level messages:
		PromptRequest
		PromptResponse
*/
package ssh

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PromptRequest struct {
	Prompter string `protobuf:"bytes,1,opt,name=prompter,proto3" json:"prompter,omitempty"`
	Context  string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	Prompt   string `protobuf:"bytes,3,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (m *PromptRequest) Reset()                    { *m = PromptRequest{} }
func (m *PromptRequest) String() string            { return proto.CompactTextString(m) }
func (*PromptRequest) ProtoMessage()               {}
func (*PromptRequest) Descriptor() ([]byte, []int) { return fileDescriptorSsh, []int{0} }

type PromptResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *PromptResponse) Reset()                    { *m = PromptResponse{} }
func (m *PromptResponse) String() string            { return proto.CompactTextString(m) }
func (*PromptResponse) ProtoMessage()               {}
func (*PromptResponse) Descriptor() ([]byte, []int) { return fileDescriptorSsh, []int{1} }

func init() {
	proto.RegisterType((*PromptRequest)(nil), "ssh.PromptRequest")
	proto.RegisterType((*PromptResponse)(nil), "ssh.PromptResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Prompt service

type PromptClient interface {
	Request(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error)
	Respond(ctx context.Context, opts ...grpc.CallOption) (Prompt_RespondClient, error)
}

type promptClient struct {
	cc *grpc.ClientConn
}

func NewPromptClient(cc *grpc.ClientConn) PromptClient {
	return &promptClient{cc}
}

func (c *promptClient) Request(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error) {
	out := new(PromptResponse)
	err := grpc.Invoke(ctx, "/ssh.Prompt/Request", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promptClient) Respond(ctx context.Context, opts ...grpc.CallOption) (Prompt_RespondClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Prompt_serviceDesc.Streams[0], c.cc, "/ssh.Prompt/Respond", opts...)
	if err != nil {
		return nil, err
	}
	x := &promptRespondClient{stream}
	return x, nil
}

type Prompt_RespondClient interface {
	Send(*PromptResponse) error
	Recv() (*PromptRequest, error)
	grpc.ClientStream
}

type promptRespondClient struct {
	grpc.ClientStream
}

func (x *promptRespondClient) Send(m *PromptResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *promptRespondClient) Recv() (*PromptRequest, error) {
	m := new(PromptRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Prompt service

type PromptServer interface {
	Request(context.Context, *PromptRequest) (*PromptResponse, error)
	Respond(Prompt_RespondServer) error
}

func RegisterPromptServer(s *grpc.Server, srv PromptServer) {
	s.RegisterService(&_Prompt_serviceDesc, srv)
}

func _Prompt_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromptServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssh.Prompt/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromptServer).Request(ctx, req.(*PromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prompt_Respond_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PromptServer).Respond(&promptRespondServer{stream})
}

type Prompt_RespondServer interface {
	Send(*PromptRequest) error
	Recv() (*PromptResponse, error)
	grpc.ServerStream
}

type promptRespondServer struct {
	grpc.ServerStream
}

func (x *promptRespondServer) Send(m *PromptRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *promptRespondServer) Recv() (*PromptResponse, error) {
	m := new(PromptResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Prompt_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ssh.Prompt",
	HandlerType: (*PromptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _Prompt_Request_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Respond",
			Handler:       _Prompt_Respond_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ssh.proto",
}

func (m *PromptRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromptRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prompter) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSsh(dAtA, i, uint64(len(m.Prompter)))
		i += copy(dAtA[i:], m.Prompter)
	}
	if len(m.Context) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSsh(dAtA, i, uint64(len(m.Context)))
		i += copy(dAtA[i:], m.Context)
	}
	if len(m.Prompt) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSsh(dAtA, i, uint64(len(m.Prompt)))
		i += copy(dAtA[i:], m.Prompt)
	}
	return i, nil
}

func (m *PromptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromptResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSsh(dAtA, i, uint64(len(m.Response)))
		i += copy(dAtA[i:], m.Response)
	}
	return i, nil
}

func encodeFixed64Ssh(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Ssh(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSsh(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PromptRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prompter)
	if l > 0 {
		n += 1 + l + sovSsh(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovSsh(uint64(l))
	}
	l = len(m.Prompt)
	if l > 0 {
		n += 1 + l + sovSsh(uint64(l))
	}
	return n
}

func (m *PromptResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovSsh(uint64(l))
	}
	return n
}

func sovSsh(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSsh(x uint64) (n int) {
	return sovSsh(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PromptRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSsh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromptRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromptRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prompter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSsh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSsh
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prompter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSsh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSsh
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prompt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSsh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSsh
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prompt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSsh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSsh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSsh
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSsh
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSsh
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSsh(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSsh
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSsh(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSsh
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSsh
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSsh
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSsh
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSsh
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSsh(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSsh = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSsh   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ssh.proto", fileDescriptorSsh) }

var fileDescriptorSsh = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0xce, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2e, 0xce, 0x50, 0x8a, 0xe5, 0xe2, 0x0d, 0x28,
	0xca, 0xcf, 0x2d, 0x28, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe2, 0xe2, 0x28,
	0x00, 0x0b, 0xa4, 0x16, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xf9, 0x42, 0x12, 0x5c,
	0xec, 0xc9, 0xf9, 0x79, 0x25, 0xa9, 0x15, 0x25, 0x12, 0x4c, 0x60, 0x29, 0x18, 0x57, 0x48, 0x8c,
	0x8b, 0x0d, 0xa2, 0x4a, 0x82, 0x19, 0x2c, 0x01, 0xe5, 0x29, 0xe9, 0x70, 0xf1, 0xc1, 0x8c, 0x2f,
	0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x05, 0x99, 0x5f, 0x04, 0x65, 0xc3, 0xcc, 0x87, 0xf1, 0x8d, 0x2a,
	0xb8, 0xd8, 0x20, 0xaa, 0x85, 0x4c, 0xb8, 0xd8, 0x61, 0x0e, 0x12, 0xd2, 0x03, 0x39, 0x19, 0xc5,
	0x91, 0x52, 0xc2, 0x28, 0x62, 0x10, 0xdd, 0x4a, 0x0c, 0x42, 0x16, 0x20, 0x5d, 0x20, 0x5e, 0x8a,
	0x10, 0x36, 0x15, 0x52, 0x58, 0x8c, 0x52, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x74, 0x12, 0x38, 0xf1,
	0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x48,
	0x62, 0x03, 0x07, 0x92, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x09, 0x2e, 0x99, 0x31, 0x01,
	0x00, 0x00,
}
