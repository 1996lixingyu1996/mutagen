// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cache.proto

/*
	Package sync is a generated protocol buffer package.

	It is generated from these files:
		cache.proto
		entry.proto

	It has these top-level messages:
		CacheEntry
		Cache
		Entry
*/
package sync

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CacheEntry struct {
	// Mode stores the value of the Go os package's FileMode type. The meaning
	// of this value is defined to be stable (even if we'd have to implement its
	// computation ourselves when porting to another language), so it's safe to
	// use, and it's a relatively sane implementation based on POSIX mode bits.
	// This information is currently used in scans and transitions, but only the
	// type and executability bits are really used (or at least necessary) at
	// the moment. It's not clear whether or not we'll eventually need the other
	// permission bits, and it might be possible to get away with a type
	// enumeration instead. This might be easier than trying to replicate
	// FileMode values if moving to another language, though I'm not sure that
	// would be too difficult. But I suppose it's better to just have this
	// additional mode information available for the sake of generality and
	// extensibility. We can always drop it later, but we can't add it back. It
	// may (I'm not exactly sure how) come in useful if we want to implement
	// permission propagation or need a better change detection heuristic. At
	// the moment though, it's highly unlikely that we'll switch away from Go,
	// and I'm willing to live with this slightly "unclean" design, especially
	// given its potential and the relative ease of deprecating it if necessary.
	Mode             uint32    `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	ModificationTime time.Time `protobuf:"bytes,2,opt,name=modificationTime,stdtime" json:"modificationTime"`
	Size_            uint64    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Digest           []byte    `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *CacheEntry) Reset()                    { *m = CacheEntry{} }
func (m *CacheEntry) String() string            { return proto.CompactTextString(m) }
func (*CacheEntry) ProtoMessage()               {}
func (*CacheEntry) Descriptor() ([]byte, []int) { return fileDescriptorCache, []int{0} }

func (m *CacheEntry) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *CacheEntry) GetModificationTime() time.Time {
	if m != nil {
		return m.ModificationTime
	}
	return time.Time{}
}

func (m *CacheEntry) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *CacheEntry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Cache struct {
	Entries map[string]*CacheEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Cache) Reset()                    { *m = Cache{} }
func (m *Cache) String() string            { return proto.CompactTextString(m) }
func (*Cache) ProtoMessage()               {}
func (*Cache) Descriptor() ([]byte, []int) { return fileDescriptorCache, []int{1} }

func (m *Cache) GetEntries() map[string]*CacheEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*CacheEntry)(nil), "sync.CacheEntry")
	proto.RegisterType((*Cache)(nil), "sync.Cache")
}
func (m *CacheEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCache(dAtA, i, uint64(m.Mode))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCache(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.ModificationTime)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ModificationTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Size_ != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCache(dAtA, i, uint64(m.Size_))
	}
	if len(m.Digest) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCache(dAtA, i, uint64(len(m.Digest)))
		i += copy(dAtA[i:], m.Digest)
	}
	return i, nil
}

func (m *Cache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cache) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for k, _ := range m.Entries {
			dAtA[i] = 0xa
			i++
			v := m.Entries[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCache(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCache(uint64(len(k))) + msgSize
			i = encodeVarintCache(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCache(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCache(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func encodeVarintCache(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CacheEntry) Size() (n int) {
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovCache(uint64(m.Mode))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ModificationTime)
	n += 1 + l + sovCache(uint64(l))
	if m.Size_ != 0 {
		n += 1 + sovCache(uint64(m.Size_))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovCache(uint64(l))
	}
	return n
}

func (m *Cache) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for k, v := range m.Entries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCache(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCache(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCache(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCache(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCache(x uint64) (n int) {
	return sovCache(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CacheEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModificationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ModificationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = append(m.Digest[:0], dAtA[iNdEx:postIndex]...)
			if m.Digest == nil {
				m.Digest = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCache
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entries == nil {
				m.Entries = make(map[string]*CacheEntry)
			}
			var mapkey string
			var mapvalue *CacheEntry
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCache
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCache
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCache
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCache
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCache
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCache
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &CacheEntry{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCache(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCache
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Entries[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCache(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCache
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCache
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCache
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCache(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCache = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCache   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cache.proto", fileDescriptorCache) }

var fileDescriptorCache = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x50, 0xbd, 0x4e, 0xc3, 0x30,
	0x18, 0xe4, 0x6b, 0xd3, 0x02, 0x6e, 0x91, 0x2a, 0x0f, 0xc8, 0xca, 0xd0, 0x46, 0x1d, 0x50, 0x16,
	0x5c, 0x29, 0x2c, 0x88, 0xb1, 0xa8, 0x1b, 0x03, 0xb2, 0xfa, 0x02, 0xf9, 0x71, 0x5d, 0x8b, 0x3a,
	0xae, 0x12, 0x07, 0x29, 0xbc, 0x01, 0x1b, 0x4f, 0xc0, 0xf3, 0x74, 0xe4, 0x09, 0x00, 0xe5, 0x49,
	0x50, 0x6c, 0x22, 0x2a, 0xb1, 0xdd, 0xe5, 0x2e, 0xdf, 0xdd, 0x19, 0x8d, 0xd2, 0x38, 0xdd, 0x72,
	0xba, 0x2f, 0xb4, 0xd1, 0xd8, 0x2b, 0xeb, 0x3c, 0xf5, 0x67, 0x42, 0x6b, 0xb1, 0xe3, 0x0b, 0xfb,
	0x2d, 0xa9, 0x36, 0x0b, 0x23, 0x15, 0x2f, 0x4d, 0xac, 0xf6, 0xce, 0xe6, 0x5f, 0x0b, 0x69, 0xb6,
	0x55, 0x42, 0x53, 0xad, 0x16, 0x42, 0x0b, 0xfd, 0xe7, 0x6c, 0x99, 0x25, 0x16, 0x39, 0xfb, 0xfc,
	0x1d, 0x10, 0xba, 0x6f, 0x53, 0x56, 0xb9, 0x29, 0x6a, 0x8c, 0x91, 0xa7, 0x74, 0xc6, 0x09, 0x04,
	0x10, 0x5e, 0x30, 0x8b, 0xf1, 0x23, 0x9a, 0x28, 0x9d, 0xc9, 0x8d, 0x4c, 0x63, 0x23, 0x75, 0xbe,
	0x96, 0x8a, 0x93, 0x5e, 0x00, 0xe1, 0x28, 0xf2, 0xa9, 0x6b, 0x43, 0xbb, 0x0c, 0xba, 0xee, 0xda,
	0x2c, 0xcf, 0x0e, 0x9f, 0xb3, 0x93, 0xb7, 0xaf, 0x19, 0xb0, 0x7f, 0x7f, 0xb7, 0x29, 0xa5, 0x7c,
	0xe1, 0xa4, 0x1f, 0x40, 0xe8, 0x31, 0x8b, 0xf1, 0x25, 0x1a, 0x66, 0x52, 0xf0, 0xd2, 0x10, 0x2f,
	0x80, 0x70, 0xcc, 0x7e, 0xd9, 0xfc, 0x15, 0xd0, 0xc0, 0x16, 0xc4, 0x11, 0x3a, 0xe5, 0xb9, 0x29,
	0x24, 0x2f, 0x09, 0x04, 0xfd, 0x70, 0x14, 0x11, 0xda, 0x3e, 0x09, 0xb5, 0x2a, 0x5d, 0x39, 0xc9,
	0xce, 0x60, 0x9d, 0xd1, 0x7f, 0x40, 0xe3, 0x63, 0x01, 0x4f, 0x50, 0xff, 0x89, 0xd7, 0x76, 0xde,
	0x39, 0x6b, 0x21, 0xbe, 0x42, 0x83, 0xe7, 0x78, 0x57, 0x75, 0x93, 0x26, 0x47, 0x37, 0xdd, 0x2d,
	0x27, 0xdf, 0xf5, 0x6e, 0x61, 0x39, 0x3e, 0x34, 0x53, 0xf8, 0x68, 0xa6, 0xf0, 0xdd, 0x4c, 0x21,
	0x19, 0xda, 0xd5, 0x37, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0x6a, 0x8b, 0x59, 0xa6, 0x01,
	0x00, 0x00,
}
