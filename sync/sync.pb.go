// Code generated by protoc-gen-go.
// source: sync.proto
// DO NOT EDIT!

/*
Package sync is a generated protocol buffer package.

It is generated from these files:
	sync.proto

It has these top-level messages:
	CacheEntry
	Cache
	Entry
	NamedEntry
	Change
	Conflict
	Problem
*/
package sync

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EntryKind int32

const (
	EntryKind_Directory EntryKind = 0
	EntryKind_File      EntryKind = 1
)

var EntryKind_name = map[int32]string{
	0: "Directory",
	1: "File",
}
var EntryKind_value = map[string]int32{
	"Directory": 0,
	"File":      1,
}

func (x EntryKind) String() string {
	return proto.EnumName(EntryKind_name, int32(x))
}
func (EntryKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CacheEntry struct {
	Mode             uint32                     `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
	ModificationTime *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=modificationTime" json:"modificationTime,omitempty"`
	Size             uint64                     `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Digest           []byte                     `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (m *CacheEntry) Reset()                    { *m = CacheEntry{} }
func (m *CacheEntry) String() string            { return proto.CompactTextString(m) }
func (*CacheEntry) ProtoMessage()               {}
func (*CacheEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CacheEntry) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *CacheEntry) GetModificationTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ModificationTime
	}
	return nil
}

func (m *CacheEntry) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CacheEntry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

type Cache struct {
	Entries map[string]*CacheEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Cache) Reset()                    { *m = Cache{} }
func (m *Cache) String() string            { return proto.CompactTextString(m) }
func (*Cache) ProtoMessage()               {}
func (*Cache) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Cache) GetEntries() map[string]*CacheEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Entry struct {
	Kind       EntryKind     `protobuf:"varint,1,opt,name=kind,enum=sync.EntryKind" json:"kind,omitempty"`
	Executable bool          `protobuf:"varint,2,opt,name=executable" json:"executable,omitempty"`
	Digest     []byte        `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Contents   []*NamedEntry `protobuf:"bytes,4,rep,name=contents" json:"contents,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Entry) GetKind() EntryKind {
	if m != nil {
		return m.Kind
	}
	return EntryKind_Directory
}

func (m *Entry) GetExecutable() bool {
	if m != nil {
		return m.Executable
	}
	return false
}

func (m *Entry) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *Entry) GetContents() []*NamedEntry {
	if m != nil {
		return m.Contents
	}
	return nil
}

type NamedEntry struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Entry *Entry `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *NamedEntry) Reset()                    { *m = NamedEntry{} }
func (m *NamedEntry) String() string            { return proto.CompactTextString(m) }
func (*NamedEntry) ProtoMessage()               {}
func (*NamedEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NamedEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NamedEntry) GetEntry() *Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type Change struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Old  *Entry `protobuf:"bytes,2,opt,name=old" json:"old,omitempty"`
	New  *Entry `protobuf:"bytes,3,opt,name=new" json:"new,omitempty"`
}

func (m *Change) Reset()                    { *m = Change{} }
func (m *Change) String() string            { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()               {}
func (*Change) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Change) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Change) GetOld() *Entry {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *Change) GetNew() *Entry {
	if m != nil {
		return m.New
	}
	return nil
}

type Conflict struct {
	Path         string    `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	AlphaChanges []*Change `protobuf:"bytes,2,rep,name=alphaChanges" json:"alphaChanges,omitempty"`
	BetaChanges  []*Change `protobuf:"bytes,3,rep,name=betaChanges" json:"betaChanges,omitempty"`
}

func (m *Conflict) Reset()                    { *m = Conflict{} }
func (m *Conflict) String() string            { return proto.CompactTextString(m) }
func (*Conflict) ProtoMessage()               {}
func (*Conflict) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Conflict) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Conflict) GetAlphaChanges() []*Change {
	if m != nil {
		return m.AlphaChanges
	}
	return nil
}

func (m *Conflict) GetBetaChanges() []*Change {
	if m != nil {
		return m.BetaChanges
	}
	return nil
}

type Problem struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// TODO: Should we switch this to an enumeration? See how many error
	// conditions we run into while implementing transition methods.
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Problem) Reset()                    { *m = Problem{} }
func (m *Problem) String() string            { return proto.CompactTextString(m) }
func (*Problem) ProtoMessage()               {}
func (*Problem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Problem) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Problem) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*CacheEntry)(nil), "sync.CacheEntry")
	proto.RegisterType((*Cache)(nil), "sync.Cache")
	proto.RegisterType((*Entry)(nil), "sync.Entry")
	proto.RegisterType((*NamedEntry)(nil), "sync.NamedEntry")
	proto.RegisterType((*Change)(nil), "sync.Change")
	proto.RegisterType((*Conflict)(nil), "sync.Conflict")
	proto.RegisterType((*Problem)(nil), "sync.Problem")
	proto.RegisterEnum("sync.EntryKind", EntryKind_name, EntryKind_value)
}

func init() { proto.RegisterFile("sync.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x8f, 0x93, 0x40,
	0x14, 0xc6, 0x9d, 0x02, 0xdd, 0xf6, 0xb5, 0xab, 0x64, 0x62, 0x0c, 0x69, 0xa2, 0x22, 0x1a, 0x43,
	0x8c, 0x61, 0x4d, 0xf7, 0x62, 0xbc, 0xd6, 0xdd, 0x8b, 0xc6, 0x98, 0xc9, 0x9e, 0xbc, 0x0d, 0xf0,
	0xda, 0x4e, 0x16, 0x66, 0x1a, 0x98, 0x5a, 0xf1, 0xe4, 0xd5, 0xab, 0xf1, 0x0f, 0x36, 0xcc, 0x40,
	0x45, 0xb7, 0xb7, 0xc7, 0xfb, 0xde, 0xfb, 0xf2, 0xfd, 0xe6, 0x01, 0x50, 0x37, 0x32, 0x4b, 0x76,
	0x95, 0xd2, 0x8a, 0xba, 0x6d, 0xbd, 0x78, 0xba, 0x51, 0x6a, 0x53, 0xe0, 0x85, 0xe9, 0xa5, 0xfb,
	0xf5, 0x85, 0x16, 0x25, 0xd6, 0x9a, 0x97, 0x3b, 0x3b, 0x16, 0xfd, 0x26, 0x00, 0x2b, 0x9e, 0x6d,
	0xf1, 0x4a, 0xea, 0xaa, 0xa1, 0x14, 0xdc, 0x52, 0xe5, 0x18, 0x90, 0x90, 0xc4, 0xe7, 0xcc, 0xd4,
	0xf4, 0x1a, 0xfc, 0x52, 0xe5, 0x62, 0x2d, 0x32, 0xae, 0x85, 0x92, 0x37, 0xa2, 0xc4, 0x60, 0x14,
	0x92, 0x78, 0xb6, 0x5c, 0x24, 0xd6, 0x3e, 0xe9, 0xed, 0x93, 0x9b, 0xde, 0x9e, 0xdd, 0xd9, 0x69,
	0xbd, 0x6b, 0xf1, 0x1d, 0x03, 0x27, 0x24, 0xb1, 0xcb, 0x4c, 0x4d, 0x1f, 0xc1, 0x38, 0x17, 0x1b,
	0xac, 0x75, 0xe0, 0x86, 0x24, 0x9e, 0xb3, 0xee, 0x2b, 0xfa, 0x49, 0xc0, 0x33, 0xb1, 0xe8, 0x12,
	0xce, 0x50, 0xea, 0x4a, 0x60, 0x1d, 0x90, 0xd0, 0x89, 0x67, 0xcb, 0x20, 0x31, 0x94, 0x46, 0x4d,
	0xae, 0xac, 0x64, 0xc2, 0xb3, 0x7e, 0x70, 0xf1, 0x11, 0xe6, 0x43, 0x81, 0xfa, 0xe0, 0xdc, 0x62,
	0x63, 0xa0, 0xa6, 0xac, 0x2d, 0xe9, 0x4b, 0xf0, 0xbe, 0xf2, 0x62, 0xdf, 0x83, 0xf8, 0x03, 0x4f,
	0xeb, 0x65, 0xe5, 0x77, 0xa3, 0xb7, 0x24, 0xfa, 0x45, 0xc0, 0xb3, 0x3e, 0xcf, 0xc1, 0xbd, 0x15,
	0x32, 0x37, 0x46, 0xf7, 0x97, 0x0f, 0xec, 0x92, 0x91, 0x3e, 0x08, 0x99, 0x33, 0x23, 0xd2, 0x27,
	0x00, 0xf8, 0x0d, 0xb3, 0xbd, 0xe6, 0x69, 0x61, 0xfd, 0x27, 0x6c, 0xd0, 0x19, 0x20, 0x3b, 0x43,
	0x64, 0xfa, 0x1a, 0x26, 0x99, 0x92, 0x1a, 0xa5, 0xae, 0x03, 0xd7, 0x90, 0x76, 0xa9, 0x3e, 0xf1,
	0x12, 0x73, 0x9b, 0xea, 0x38, 0x11, 0xad, 0x00, 0xfe, 0xf6, 0xdb, 0xa7, 0x95, 0xbc, 0xc4, 0x8e,
	0xd0, 0xd4, 0xf4, 0x19, 0x78, 0xed, 0x7b, 0x34, 0x1d, 0xe2, 0x6c, 0x90, 0x96, 0x59, 0x25, 0xfa,
	0x02, 0xe3, 0xd5, 0x96, 0xcb, 0x8d, 0xb9, 0xcd, 0x8e, 0xeb, 0x6d, 0x6f, 0xd0, 0xd6, 0xf4, 0x31,
	0x38, 0xaa, 0xc8, 0x4f, 0xad, 0xb7, 0xfd, 0x56, 0x96, 0x78, 0x30, 0x10, 0xff, 0xcb, 0x12, 0x0f,
	0xd1, 0x0f, 0x02, 0x93, 0x95, 0x92, 0xeb, 0x42, 0x64, 0xfa, 0xa4, 0xfd, 0x1b, 0x98, 0xf3, 0x62,
	0xb7, 0xe5, 0x36, 0x41, 0x1d, 0x8c, 0x0c, 0xf3, 0xbc, 0xbb, 0x84, 0x69, 0xb2, 0x7f, 0x26, 0x68,
	0x02, 0xb3, 0x14, 0xf5, 0x71, 0xc1, 0x39, 0xb1, 0x30, 0x1c, 0x88, 0x2e, 0xe1, 0xec, 0x73, 0xa5,
	0xd2, 0x02, 0xcb, 0x93, 0x01, 0x1e, 0x82, 0x87, 0x55, 0xa5, 0x2a, 0x43, 0x38, 0x65, 0xf6, 0xe3,
	0xd5, 0x0b, 0x98, 0x1e, 0x2f, 0x4a, 0xcf, 0x61, 0xfa, 0x5e, 0x54, 0x98, 0x69, 0x55, 0x35, 0xfe,
	0x3d, 0x3a, 0x01, 0xf7, 0x5a, 0x14, 0xe8, 0x93, 0x74, 0x6c, 0xfe, 0xf8, 0xcb, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x79, 0x89, 0x06, 0x25, 0x72, 0x03, 0x00, 0x00,
}
